/** \file
 *  This C header file was generated by $ANTLR version 3.5.1
 *
 *     -  From the grammar source file : C:\\Users\\matej_000\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g
 *     -                            On : 2014-10-02 00:12:55
 *     -                for the parser : GeoGenScriptParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
GeoGenScriptParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pGeoGenScriptParser, which is returned from a call to GeoGenScriptParserNew().
 *
 * The methods in pGeoGenScriptParser are  as follows:
 *
 *  - 
 GeoGenScriptParser_script_return
      pGeoGenScriptParser->script(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_metadata_return
      pGeoGenScriptParser->metadata(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_keyValueCollection_return
      pGeoGenScriptParser->keyValueCollection(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_simpleCollection_return
      pGeoGenScriptParser->simpleCollection(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_keyValuePair_return
      pGeoGenScriptParser->keyValuePair(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_keyValueValue_return
      pGeoGenScriptParser->keyValueValue(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_declaration_return
      pGeoGenScriptParser->declaration(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_enumDeclaration_return
      pGeoGenScriptParser->enumDeclaration(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_enumValues_return
      pGeoGenScriptParser->enumValues(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_enumValue_return
      pGeoGenScriptParser->enumValue(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_functionDeclaration_return
      pGeoGenScriptParser->functionDeclaration(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_formalParameters_return
      pGeoGenScriptParser->formalParameters(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_block_return
      pGeoGenScriptParser->block(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_statement_return
      pGeoGenScriptParser->statement(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_variableDeclaration_return
      pGeoGenScriptParser->variableDeclaration(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_globalVariableDeclaration_return
      pGeoGenScriptParser->globalVariableDeclaration(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_yieldStatement_return
      pGeoGenScriptParser->yieldStatement(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_returnStatement_return
      pGeoGenScriptParser->returnStatement(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_whileStatement_return
      pGeoGenScriptParser->whileStatement(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_forStatement_return
      pGeoGenScriptParser->forStatement(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_initExpression_return
      pGeoGenScriptParser->initExpression(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_ifStatement_return
      pGeoGenScriptParser->ifStatement(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_switchStatement_return
      pGeoGenScriptParser->switchStatement(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_normalCase_return
      pGeoGenScriptParser->normalCase(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_defaultCase_return
      pGeoGenScriptParser->defaultCase(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_expression_return
      pGeoGenScriptParser->expression(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio14Expression_return
      pGeoGenScriptParser->prio14Expression(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio13Expression_return
      pGeoGenScriptParser->prio13Expression(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio12Operator_return
      pGeoGenScriptParser->prio12Operator(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio12Expression_return
      pGeoGenScriptParser->prio12Expression(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio11Operator_return
      pGeoGenScriptParser->prio11Operator(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio11Expression_return
      pGeoGenScriptParser->prio11Expression(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio10Operator_return
      pGeoGenScriptParser->prio10Operator(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio10Expression_return
      pGeoGenScriptParser->prio10Expression(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio9Operator_return
      pGeoGenScriptParser->prio9Operator(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio9Expression_return
      pGeoGenScriptParser->prio9Expression(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio8Operator_return
      pGeoGenScriptParser->prio8Operator(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio8Expression_return
      pGeoGenScriptParser->prio8Expression(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio7Expression_return
      pGeoGenScriptParser->prio7Expression(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio6Expression_return
      pGeoGenScriptParser->prio6Expression(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio5Expression_return
      pGeoGenScriptParser->prio5Expression(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio4Expression_return
      pGeoGenScriptParser->prio4Expression(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio3Expression_return
      pGeoGenScriptParser->prio3Expression(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio2PrefixOperator_return
      pGeoGenScriptParser->prio2PrefixOperator(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio2PostfixOperator_return
      pGeoGenScriptParser->prio2PostfixOperator(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio2ExpressionPre_return
      pGeoGenScriptParser->prio2ExpressionPre(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio2ExpressionPost_return
      pGeoGenScriptParser->prio2ExpressionPost(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio1Expression_return
      pGeoGenScriptParser->prio1Expression(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_prio0Expression_return
      pGeoGenScriptParser->prio0Expression(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_collectionLiteral_return
      pGeoGenScriptParser->collectionLiteral(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_collectionLiteralItem_return
      pGeoGenScriptParser->collectionLiteralItem(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_coordinateLiteral_return
      pGeoGenScriptParser->coordinateLiteral(pGeoGenScriptParser)
 *  - 
 GeoGenScriptParser_label_return
      pGeoGenScriptParser->label(pGeoGenScriptParser)
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_GeoGenScriptParser_H
#define _GeoGenScriptParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

	#include <memory>
	#include <stdexcept>
	
	#include "../../compiler/UnexpectedTokenException.hpp"
	#include "../../compiler/UnexpectedCharacterException.hpp"
	#include "../../compiler/InvalidEscapeSequenceException.hpp"
	#include "../../compiler/ReadOnlyExpressionWriteException.hpp"
	#include "../../compiler/InvalidSymbolDefinitionException.hpp"
	#include "../../compiler/SymbolRedefinitionException.hpp"
	#include "../../compiler/MetadataKeyRedefinitionException.hpp"
	#include "../../runtime/CompiledScript.hpp"
	#include "../../runtime/CodeBlock.hpp"
	#include "../../runtime/MetadataBoolean.hpp"
	#include "../../runtime/MetadataIdentifier.hpp"
	#include "../../runtime/MetadataKeyValueCollection.hpp"
	#include "../../runtime/MetadataList.hpp"
	#include "../../runtime/MetadataNumber.hpp"
	#include "../../runtime/MetadataString.hpp"
	#include "../../runtime/MetadataValue.hpp"
	#include "../../runtime/ScriptFunctionDefinition.hpp"
	#include "../../corelib/EnumTypeDefinition.hpp"
	#include "../../corelib/ArrayTypeDefinition.hpp"
	#include "../../compiler/Compiler.hpp"
	#include "../../runtime/instructions/CallGlobalInstruction.hpp"
	#include "../../runtime/instructions/BreakInstruction.hpp"
	#include "../../runtime/instructions/CallBlockInstruction.hpp"
	#include "../../runtime/instructions/CallGlobalInstruction.hpp"
	#include "../../runtime/instructions/CallMemberInstruction.hpp"
	#include "../../runtime/instructions/ContinueInstruction.hpp"
	#include "../../runtime/instructions/DeclareGlobalValueInstruction.hpp"
	#include "../../runtime/instructions/DeclareLocalValueInstruction.hpp"
	#include "../../runtime/instructions/IfInstruction.hpp"
	#include "../../runtime/instructions/LoadConstBooleanInstruction.hpp"
	#include "../../runtime/instructions/LoadConstNumberInstruction.hpp"
	#include "../../runtime/instructions/LoadConstStringInstruction.hpp"
	#include "../../runtime/instructions/LoadMemberValueInstruction.hpp"
	#include "../../runtime/instructions/LoadNullInstruction.hpp"
	#include "../../runtime/instructions/LoadScopeReferenceInstruction.hpp"
	#include "../../runtime/instructions/LoadScopeValueInstruction.hpp"
	#include "../../runtime/instructions/PopInstruction.hpp"
	#include "../../runtime/instructions/StoreGlobalValueInstruction.hpp"
	#include "../../runtime/instructions/StoreMemberValueInstruction.hpp"
	#include "../../runtime/instructions/StoreReferenceInstruction.hpp"
	#include "../../runtime/instructions/StoreScopeValueInstruction.hpp"
	#include "../../runtime/instructions/WhileInstruction.hpp"
	#include "../../runtime/instructions/YieldAsNamedInstruction.hpp"
	#include "../../renderer/Renderer.hpp"

	using namespace std;
	using namespace geogen;
	using namespace geogen::compiler;
	
	void handleParserError (pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_UINT8 * tokenNames);


#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct GeoGenScriptParser_Ctx_struct GeoGenScriptParser, * pGeoGenScriptParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct GeoGenScriptParser_script_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_script_return;



typedef struct GeoGenScriptParser_metadata_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_metadata_return;



typedef struct GeoGenScriptParser_keyValueCollection_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_keyValueCollection_return;



typedef struct GeoGenScriptParser_simpleCollection_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_simpleCollection_return;



typedef struct GeoGenScriptParser_keyValuePair_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_keyValuePair_return;



typedef struct GeoGenScriptParser_keyValueValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_keyValueValue_return;



typedef struct GeoGenScriptParser_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_declaration_return;



typedef struct GeoGenScriptParser_enumDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_enumDeclaration_return;



typedef struct GeoGenScriptParser_enumValues_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_enumValues_return;



typedef struct GeoGenScriptParser_enumValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_enumValue_return;



typedef struct GeoGenScriptParser_functionDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_functionDeclaration_return;



typedef struct GeoGenScriptParser_formalParameters_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_formalParameters_return;



typedef struct GeoGenScriptParser_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_block_return;



typedef struct GeoGenScriptParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_statement_return;



typedef struct GeoGenScriptParser_variableDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_variableDeclaration_return;



typedef struct GeoGenScriptParser_globalVariableDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_globalVariableDeclaration_return;



typedef struct GeoGenScriptParser_yieldStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_yieldStatement_return;



typedef struct GeoGenScriptParser_returnStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_returnStatement_return;



typedef struct GeoGenScriptParser_whileStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_whileStatement_return;



typedef struct GeoGenScriptParser_forStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_forStatement_return;



typedef struct GeoGenScriptParser_initExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_initExpression_return;



typedef struct GeoGenScriptParser_ifStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_ifStatement_return;



typedef struct GeoGenScriptParser_switchStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_switchStatement_return;



typedef struct GeoGenScriptParser_normalCase_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_normalCase_return;



typedef struct GeoGenScriptParser_defaultCase_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_defaultCase_return;



typedef struct GeoGenScriptParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_expression_return;



typedef struct GeoGenScriptParser_prio14Expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio14Expression_return;



typedef struct GeoGenScriptParser_prio13Expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio13Expression_return;



typedef struct GeoGenScriptParser_prio12Operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio12Operator_return;



typedef struct GeoGenScriptParser_prio12Expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio12Expression_return;



typedef struct GeoGenScriptParser_prio11Operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio11Operator_return;



typedef struct GeoGenScriptParser_prio11Expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio11Expression_return;



typedef struct GeoGenScriptParser_prio10Operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio10Operator_return;



typedef struct GeoGenScriptParser_prio10Expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio10Expression_return;



typedef struct GeoGenScriptParser_prio9Operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio9Operator_return;



typedef struct GeoGenScriptParser_prio9Expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio9Expression_return;



typedef struct GeoGenScriptParser_prio8Operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio8Operator_return;



typedef struct GeoGenScriptParser_prio8Expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio8Expression_return;



typedef struct GeoGenScriptParser_prio7Expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio7Expression_return;



typedef struct GeoGenScriptParser_prio6Expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio6Expression_return;



typedef struct GeoGenScriptParser_prio5Expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio5Expression_return;



typedef struct GeoGenScriptParser_prio4Expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio4Expression_return;



typedef struct GeoGenScriptParser_prio3Expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio3Expression_return;



typedef struct GeoGenScriptParser_prio2PrefixOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio2PrefixOperator_return;



typedef struct GeoGenScriptParser_prio2PostfixOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio2PostfixOperator_return;



typedef struct GeoGenScriptParser_prio2ExpressionPre_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio2ExpressionPre_return;



typedef struct GeoGenScriptParser_prio2ExpressionPost_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio2ExpressionPost_return;



typedef struct GeoGenScriptParser_prio1Expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio1Expression_return;



typedef struct GeoGenScriptParser_prio0Expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_prio0Expression_return;



typedef struct GeoGenScriptParser_collectionLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_collectionLiteral_return;



typedef struct GeoGenScriptParser_collectionLiteralItem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_collectionLiteralItem_return;



typedef struct GeoGenScriptParser_coordinateLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_coordinateLiteral_return;



typedef struct GeoGenScriptParser_label_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GeoGenScriptParser_label_return;




/** Context tracking structure for 
GeoGenScriptParser

 */
struct GeoGenScriptParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     GeoGenScriptParser_script_return
     (*script)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_metadata_return
     (*metadata)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_keyValueCollection_return
     (*keyValueCollection)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_simpleCollection_return
     (*simpleCollection)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_keyValuePair_return
     (*keyValuePair)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_keyValueValue_return
     (*keyValueValue)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_declaration_return
     (*declaration)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_enumDeclaration_return
     (*enumDeclaration)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_enumValues_return
     (*enumValues)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_enumValue_return
     (*enumValue)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_functionDeclaration_return
     (*functionDeclaration)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_formalParameters_return
     (*formalParameters)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_block_return
     (*block)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_statement_return
     (*statement)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_variableDeclaration_return
     (*variableDeclaration)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_globalVariableDeclaration_return
     (*globalVariableDeclaration)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_yieldStatement_return
     (*yieldStatement)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_returnStatement_return
     (*returnStatement)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_whileStatement_return
     (*whileStatement)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_forStatement_return
     (*forStatement)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_initExpression_return
     (*initExpression)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_ifStatement_return
     (*ifStatement)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_switchStatement_return
     (*switchStatement)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_normalCase_return
     (*normalCase)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_defaultCase_return
     (*defaultCase)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_expression_return
     (*expression)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio14Expression_return
     (*prio14Expression)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio13Expression_return
     (*prio13Expression)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio12Operator_return
     (*prio12Operator)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio12Expression_return
     (*prio12Expression)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio11Operator_return
     (*prio11Operator)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio11Expression_return
     (*prio11Expression)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio10Operator_return
     (*prio10Operator)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio10Expression_return
     (*prio10Expression)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio9Operator_return
     (*prio9Operator)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio9Expression_return
     (*prio9Expression)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio8Operator_return
     (*prio8Operator)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio8Expression_return
     (*prio8Expression)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio7Expression_return
     (*prio7Expression)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio6Expression_return
     (*prio6Expression)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio5Expression_return
     (*prio5Expression)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio4Expression_return
     (*prio4Expression)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio3Expression_return
     (*prio3Expression)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio2PrefixOperator_return
     (*prio2PrefixOperator)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio2PostfixOperator_return
     (*prio2PostfixOperator)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio2ExpressionPre_return
     (*prio2ExpressionPre)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio2ExpressionPost_return
     (*prio2ExpressionPost)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio1Expression_return
     (*prio1Expression)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_prio0Expression_return
     (*prio0Expression)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_collectionLiteral_return
     (*collectionLiteral)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_collectionLiteralItem_return
     (*collectionLiteralItem)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_coordinateLiteral_return
     (*coordinateLiteral)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     GeoGenScriptParser_label_return
     (*label)	(struct GeoGenScriptParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1_GeoGenScript)	(struct GeoGenScriptParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct GeoGenScriptParser_Ctx_struct * ctx);
    void	    (*free)   (struct GeoGenScriptParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
    	bool inExpression = false;

};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pGeoGenScriptParser GeoGenScriptParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pGeoGenScriptParser GeoGenScriptParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define AS      4
#define BLOCK      5
#define BREAK      6
#define CASE      7
#define COLLECTION      8
#define COLLECTION_ITEM      9
#define COLON      10
#define COMMA      11
#define COMMENT      12
#define CONDITION_EXPRESSION      13
#define CONTINUE      14
#define COORDINATE      15
#define DECLARATIONS      16
#define DEFAULT      17
#define ELSE      18
#define ENUM      19
#define ESCAPED      20
#define FALSE_LIT      21
#define FOR      22
#define FUNCTION      23
#define GLOBAL      24
#define IDENTCHAIN      25
#define IDENTIFIER      26
#define IF      27
#define INCREMENT_EXPRESSION      28
#define INITIALIZATION_EXPRESSION      29
#define INTEGER      30
#define LEFT_BRACKET      31
#define LEFT_CURLY_BRACKET      32
#define LEFT_SQUARE_BRACKET      33
#define METADATA      34
#define NUMBER      35
#define OPERATOR_ASSIGN      36
#define OPERATOR_ASSIGN_AND      37
#define OPERATOR_ASSIGN_DIVIDE      38
#define OPERATOR_ASSIGN_LSHIFT      39
#define OPERATOR_ASSIGN_MINUS      40
#define OPERATOR_ASSIGN_MODULO      41
#define OPERATOR_ASSIGN_OR      42
#define OPERATOR_ASSIGN_PLUS      43
#define OPERATOR_ASSIGN_RSHIFT      44
#define OPERATOR_ASSIGN_TIMES      45
#define OPERATOR_ASSIGN_XOR      46
#define OPERATOR_BIT_AND      47
#define OPERATOR_BIT_OR      48
#define OPERATOR_BIT_XOR      49
#define OPERATOR_CALL      50
#define OPERATOR_DECREMENT      51
#define OPERATOR_DECREMENT_POST      52
#define OPERATOR_DECREMENT_PRE      53
#define OPERATOR_DIVIDE      54
#define OPERATOR_DOT      55
#define OPERATOR_EQUAL_TO      56
#define OPERATOR_EXPR_IF      57
#define OPERATOR_GREATER_THAN      58
#define OPERATOR_GREATER_THAN_OR_EQUAL_TO      59
#define OPERATOR_INCREMENT      60
#define OPERATOR_INCREMENT_POST      61
#define OPERATOR_INCREMENT_PRE      62
#define OPERATOR_IS      63
#define OPERATOR_LESS_THAN      64
#define OPERATOR_LESS_THAN_OR_EQUAL_TO      65
#define OPERATOR_LSHIFT      66
#define OPERATOR_MINUS      67
#define OPERATOR_MINUS_UN      68
#define OPERATOR_MODULO      69
#define OPERATOR_NOT      70
#define OPERATOR_NOT_EQUAL_TO      71
#define OPERATOR_PLUS      72
#define OPERATOR_PLUS_UN      73
#define OPERATOR_RELATIVE      74
#define OPERATOR_REL_AND      75
#define OPERATOR_REL_OR      76
#define OPERATOR_RSHIFT      77
#define OPERATOR_SUBSCRIPT      78
#define OPERATOR_TIMES      79
#define PARAMETERS      80
#define QUOTE      81
#define RETURN      82
#define RIGHT_BRACKET      83
#define RIGHT_SQUARE_BRACKET      84
#define RIGTH_CURLY_BRACKET      85
#define SCRIPT      86
#define SEMICOLON      87
#define SIMPLE_COLLECTION      88
#define STRING      89
#define SWITCH      90
#define TRUE_LIT      91
#define VALUES      92
#define VAR      93
#define WHILE      94
#define WHITESPACE      95
#define YIELD      96
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for GeoGenScriptParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
