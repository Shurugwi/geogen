/** \file
 *  This C++ source file was generated by $ANTLR version 3.5-rc-2
 *
 *     -  From the grammar source file : D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g
 *     -                            On : 2013-11-10 01:12:52
 *     -                 for the lexer : GeoGenScriptLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "GeoGenScriptLexer.hpp"
/* ----------------------------------------- */



	namespace 
    geogen_generated
 {


/** String literals used by GeoGenScriptLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR_UCHAR	lit_1[]  = { 0x74, 0x72, 0x75, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_2[]  = { 0x66, 0x61, 0x6C, 0x73, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_3[]  = { 0x6D, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_4[]  = { 0x65, 0x6E, 0x75, 0x6D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_5[]  = { 0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_6[]  = { 0x76, 0x61, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_7[]  = { 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_8[]  = { 0x79, 0x69, 0x65, 0x6C, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_9[]  = { 0x61, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_10[]  = { 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_11[]  = { 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_12[]  = { 0x63, 0x61, 0x73, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_13[]  = { 0x69, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_14[]  = { 0x65, 0x6C, 0x73, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_15[]  = { 0x66, 0x6F, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_16[]  = { 0x77, 0x68, 0x69, 0x6C, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_17[]  = { 0x62, 0x72, 0x65, 0x61, 0x6B,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_18[]  = { 0x63, 0x6F, 0x6E, 0x74, 0x69, 0x6E, 0x75, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_19[]  = { 0x2B, 0x2B,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_20[]  = { 0x2D, 0x2D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_21[]  = { 0x3C, 0x3C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_22[]  = { 0x3E, 0x3E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_23[]  = { 0x3C, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_24[]  = { 0x3E, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_25[]  = { 0x3D, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_26[]  = { 0x21, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_27[]  = { 0x26, 0x26,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_28[]  = { 0x7C, 0x7C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_29[]  = { 0x2B, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_30[]  = { 0x2D, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_31[]  = { 0x2A, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_32[]  = { 0x2F, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_33[]  = { 0x25, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_34[]  = { 0x3C, 0x3C, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_35[]  = { 0x3E, 0x3E, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_36[]  = { 0x26, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_37[]  = { 0x5E, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_38[]  = { 0x7C, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_39[]  = { 0x69, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_40[]  = { 0x2F, 0x2F,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_41[]  = { 0x2F, 0x2A,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_42[]  = { 0x2A, 0x2F,  antlr3::ANTLR_STRING_TERMINATOR};

	}



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;

	namespace 
    geogen_generated
 {


/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



GeoGenScriptLexer::~GeoGenScriptLexer()
{
}

void
GeoGenScriptLexer::reset()
{
    this->get_rec()->reset();
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* GeoGenScriptLexer::getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called GeoGenScriptLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pGeoGenScriptLexer initialized for the lex start
 *     - Fail NULL
 */
GeoGenScriptLexer::GeoGenScriptLexer(StreamType* instream)
:GeoGenScriptLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	// See if we can create a new lexer with the standard constructor
	//
	this->init(instream );
}

/** \brief Create a new lexer called GeoGenScriptLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pGeoGenScriptLexer initialized for the lex start
 *     - Fail NULL
 */
GeoGenScriptLexer::GeoGenScriptLexer(StreamType* instream, RecognizerSharedStateType* state)
:GeoGenScriptLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void GeoGenScriptLexer::init(StreamType* instream)
{
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in GeoGenScriptLexer.h here so you can get a sense
     * of what goes where.
     */

}

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 211:13: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LEFT_BRACKET
 *
 * Looks to match the characters the constitute the token LEFT_BRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mLEFT_BRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = LEFT_BRACKET;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:211:13: ( '(' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:211:15: '('
    {
         this->matchc('(');
        if  (this->hasException())
        {
            goto ruleLEFT_BRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLEFT_BRACKETEx; /* Prevent compiler warnings */
    ruleLEFT_BRACKETEx: ;

}
// $ANTLR end LEFT_BRACKET

//   Comes from: 212:14: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RIGHT_BRACKET
 *
 * Looks to match the characters the constitute the token RIGHT_BRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mRIGHT_BRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = RIGHT_BRACKET;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:212:14: ( ')' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:212:16: ')'
    {
         this->matchc(')');
        if  (this->hasException())
        {
            goto ruleRIGHT_BRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleRIGHT_BRACKETEx; /* Prevent compiler warnings */
    ruleRIGHT_BRACKETEx: ;

}
// $ANTLR end RIGHT_BRACKET

//   Comes from: 213:20: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LEFT_SQUARE_BRACKET
 *
 * Looks to match the characters the constitute the token LEFT_SQUARE_BRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mLEFT_SQUARE_BRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = LEFT_SQUARE_BRACKET;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:213:20: ( '[' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:213:22: '['
    {
         this->matchc('[');
        if  (this->hasException())
        {
            goto ruleLEFT_SQUARE_BRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLEFT_SQUARE_BRACKETEx; /* Prevent compiler warnings */
    ruleLEFT_SQUARE_BRACKETEx: ;

}
// $ANTLR end LEFT_SQUARE_BRACKET

//   Comes from: 214:21: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RIGHT_SQUARE_BRACKET
 *
 * Looks to match the characters the constitute the token RIGHT_SQUARE_BRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mRIGHT_SQUARE_BRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = RIGHT_SQUARE_BRACKET;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:214:21: ( ']' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:214:23: ']'
    {
         this->matchc(']');
        if  (this->hasException())
        {
            goto ruleRIGHT_SQUARE_BRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleRIGHT_SQUARE_BRACKETEx; /* Prevent compiler warnings */
    ruleRIGHT_SQUARE_BRACKETEx: ;

}
// $ANTLR end RIGHT_SQUARE_BRACKET

//   Comes from: 215:19: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LEFT_CURLY_BRACKET
 *
 * Looks to match the characters the constitute the token LEFT_CURLY_BRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mLEFT_CURLY_BRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = LEFT_CURLY_BRACKET;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:215:19: ( '{' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:215:21: '{'
    {
         this->matchc('{');
        if  (this->hasException())
        {
            goto ruleLEFT_CURLY_BRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLEFT_CURLY_BRACKETEx; /* Prevent compiler warnings */
    ruleLEFT_CURLY_BRACKETEx: ;

}
// $ANTLR end LEFT_CURLY_BRACKET

//   Comes from: 216:20: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RIGTH_CURLY_BRACKET
 *
 * Looks to match the characters the constitute the token RIGTH_CURLY_BRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mRIGTH_CURLY_BRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = RIGTH_CURLY_BRACKET;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:216:20: ( '}' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:216:22: '}'
    {
         this->matchc('}');
        if  (this->hasException())
        {
            goto ruleRIGTH_CURLY_BRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleRIGTH_CURLY_BRACKETEx; /* Prevent compiler warnings */
    ruleRIGTH_CURLY_BRACKETEx: ;

}
// $ANTLR end RIGTH_CURLY_BRACKET

//   Comes from: 218:9: ( 'true' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TRUE_LIT
 *
 * Looks to match the characters the constitute the token TRUE_LIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mTRUE_LIT()
{
    ANTLR_UINT32	_type;
      


    _type	    = TRUE_LIT;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:218:9: ( 'true' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:218:11: 'true'
    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleTRUE_LITEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTRUE_LITEx; /* Prevent compiler warnings */
    ruleTRUE_LITEx: ;

}
// $ANTLR end TRUE_LIT

//   Comes from: 219:10: ( 'false' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FALSE_LIT
 *
 * Looks to match the characters the constitute the token FALSE_LIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mFALSE_LIT()
{
    ANTLR_UINT32	_type;
      


    _type	    = FALSE_LIT;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:219:10: ( 'false' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:219:12: 'false'
    {
        this->matchs(lit_2);
        if  (this->hasException())
        {
            goto ruleFALSE_LITEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleFALSE_LITEx; /* Prevent compiler warnings */
    ruleFALSE_LITEx: ;

}
// $ANTLR end FALSE_LIT

//   Comes from: 221:6: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMA
 *
 * Looks to match the characters the constitute the token COMMA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mCOMMA()
{
    ANTLR_UINT32	_type;
      


    _type	    = COMMA;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:221:6: ( ',' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:221:8: ','
    {
         this->matchc(',');
        if  (this->hasException())
        {
            goto ruleCOMMAEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOMMAEx; /* Prevent compiler warnings */
    ruleCOMMAEx: ;

}
// $ANTLR end COMMA

//   Comes from: 222:10: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SEMICOLON
 *
 * Looks to match the characters the constitute the token SEMICOLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mSEMICOLON()
{
    ANTLR_UINT32	_type;
      


    _type	    = SEMICOLON;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:222:10: ( ';' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:222:12: ';'
    {
         this->matchc(';');
        if  (this->hasException())
        {
            goto ruleSEMICOLONEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSEMICOLONEx; /* Prevent compiler warnings */
    ruleSEMICOLONEx: ;

}
// $ANTLR end SEMICOLON

//   Comes from: 223:6: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COLON
 *
 * Looks to match the characters the constitute the token COLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mCOLON()
{
    ANTLR_UINT32	_type;
      


    _type	    = COLON;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:223:6: ( ':' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:223:8: ':'
    {
         this->matchc(':');
        if  (this->hasException())
        {
            goto ruleCOLONEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOLONEx; /* Prevent compiler warnings */
    ruleCOLONEx: ;

}
// $ANTLR end COLON

//   Comes from: 224:3: ( '@' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start AT
 *
 * Looks to match the characters the constitute the token AT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mAT()
{
    ANTLR_UINT32	_type;
      


    _type	    = AT;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:224:3: ( '@' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:224:5: '@'
    {
         this->matchc('@');
        if  (this->hasException())
        {
            goto ruleATEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleATEx; /* Prevent compiler warnings */
    ruleATEx: ;

}
// $ANTLR end AT

//   Comes from: 226:9: ( 'metadata' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start METADATA
 *
 * Looks to match the characters the constitute the token METADATA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mMETADATA()
{
    ANTLR_UINT32	_type;
      


    _type	    = METADATA;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:226:9: ( 'metadata' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:226:11: 'metadata'
    {
        this->matchs(lit_3);
        if  (this->hasException())
        {
            goto ruleMETADATAEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMETADATAEx; /* Prevent compiler warnings */
    ruleMETADATAEx: ;

}
// $ANTLR end METADATA

//   Comes from: 227:5: ( 'enum' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ENUM
 *
 * Looks to match the characters the constitute the token ENUM
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mENUM()
{
    ANTLR_UINT32	_type;
      


    _type	    = ENUM;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:227:5: ( 'enum' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:227:7: 'enum'
    {
        this->matchs(lit_4);
        if  (this->hasException())
        {
            goto ruleENUMEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleENUMEx; /* Prevent compiler warnings */
    ruleENUMEx: ;

}
// $ANTLR end ENUM

//   Comes from: 228:9: ( 'function' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FUNCTION
 *
 * Looks to match the characters the constitute the token FUNCTION
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mFUNCTION()
{
    ANTLR_UINT32	_type;
      


    _type	    = FUNCTION;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:228:9: ( 'function' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:228:11: 'function'
    {
        this->matchs(lit_5);
        if  (this->hasException())
        {
            goto ruleFUNCTIONEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleFUNCTIONEx; /* Prevent compiler warnings */
    ruleFUNCTIONEx: ;

}
// $ANTLR end FUNCTION

//   Comes from: 229:4: ( 'var' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start VAR
 *
 * Looks to match the characters the constitute the token VAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mVAR()
{
    ANTLR_UINT32	_type;
      


    _type	    = VAR;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:229:4: ( 'var' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:229:6: 'var'
    {
        this->matchs(lit_6);
        if  (this->hasException())
        {
            goto ruleVAREx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleVAREx; /* Prevent compiler warnings */
    ruleVAREx: ;

}
// $ANTLR end VAR

//   Comes from: 231:7: ( 'return' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RETURN
 *
 * Looks to match the characters the constitute the token RETURN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mRETURN()
{
    ANTLR_UINT32	_type;
      


    _type	    = RETURN;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:231:7: ( 'return' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:231:9: 'return'
    {
        this->matchs(lit_7);
        if  (this->hasException())
        {
            goto ruleRETURNEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleRETURNEx; /* Prevent compiler warnings */
    ruleRETURNEx: ;

}
// $ANTLR end RETURN

//   Comes from: 232:6: ( 'yield' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start YIELD
 *
 * Looks to match the characters the constitute the token YIELD
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mYIELD()
{
    ANTLR_UINT32	_type;
      


    _type	    = YIELD;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:232:6: ( 'yield' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:232:8: 'yield'
    {
        this->matchs(lit_8);
        if  (this->hasException())
        {
            goto ruleYIELDEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleYIELDEx; /* Prevent compiler warnings */
    ruleYIELDEx: ;

}
// $ANTLR end YIELD

//   Comes from: 233:3: ( 'as' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start AS
 *
 * Looks to match the characters the constitute the token AS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mAS()
{
    ANTLR_UINT32	_type;
      


    _type	    = AS;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:233:3: ( 'as' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:233:5: 'as'
    {
        this->matchs(lit_9);
        if  (this->hasException())
        {
            goto ruleASEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleASEx; /* Prevent compiler warnings */
    ruleASEx: ;

}
// $ANTLR end AS

//   Comes from: 235:7: ( 'switch' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SWITCH
 *
 * Looks to match the characters the constitute the token SWITCH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mSWITCH()
{
    ANTLR_UINT32	_type;
      


    _type	    = SWITCH;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:235:7: ( 'switch' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:235:9: 'switch'
    {
        this->matchs(lit_10);
        if  (this->hasException())
        {
            goto ruleSWITCHEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSWITCHEx; /* Prevent compiler warnings */
    ruleSWITCHEx: ;

}
// $ANTLR end SWITCH

//   Comes from: 236:8: ( 'default' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DEFAULT
 *
 * Looks to match the characters the constitute the token DEFAULT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mDEFAULT()
{
    ANTLR_UINT32	_type;
      


    _type	    = DEFAULT;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:236:8: ( 'default' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:236:10: 'default'
    {
        this->matchs(lit_11);
        if  (this->hasException())
        {
            goto ruleDEFAULTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDEFAULTEx; /* Prevent compiler warnings */
    ruleDEFAULTEx: ;

}
// $ANTLR end DEFAULT

//   Comes from: 237:5: ( 'case' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CASE
 *
 * Looks to match the characters the constitute the token CASE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mCASE()
{
    ANTLR_UINT32	_type;
      


    _type	    = CASE;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:237:5: ( 'case' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:237:7: 'case'
    {
        this->matchs(lit_12);
        if  (this->hasException())
        {
            goto ruleCASEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCASEEx; /* Prevent compiler warnings */
    ruleCASEEx: ;

}
// $ANTLR end CASE

//   Comes from: 238:3: ( 'if' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IF
 *
 * Looks to match the characters the constitute the token IF
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mIF()
{
    ANTLR_UINT32	_type;
      


    _type	    = IF;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:238:3: ( 'if' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:238:5: 'if'
    {
        this->matchs(lit_13);
        if  (this->hasException())
        {
            goto ruleIFEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIFEx; /* Prevent compiler warnings */
    ruleIFEx: ;

}
// $ANTLR end IF

//   Comes from: 239:5: ( 'else' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ELSE
 *
 * Looks to match the characters the constitute the token ELSE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mELSE()
{
    ANTLR_UINT32	_type;
      


    _type	    = ELSE;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:239:5: ( 'else' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:239:7: 'else'
    {
        this->matchs(lit_14);
        if  (this->hasException())
        {
            goto ruleELSEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleELSEEx; /* Prevent compiler warnings */
    ruleELSEEx: ;

}
// $ANTLR end ELSE

//   Comes from: 240:4: ( 'for' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FOR
 *
 * Looks to match the characters the constitute the token FOR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mFOR()
{
    ANTLR_UINT32	_type;
      


    _type	    = FOR;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:240:4: ( 'for' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:240:6: 'for'
    {
        this->matchs(lit_15);
        if  (this->hasException())
        {
            goto ruleFOREx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleFOREx; /* Prevent compiler warnings */
    ruleFOREx: ;

}
// $ANTLR end FOR

//   Comes from: 241:6: ( 'while' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WHILE
 *
 * Looks to match the characters the constitute the token WHILE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mWHILE()
{
    ANTLR_UINT32	_type;
      


    _type	    = WHILE;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:241:6: ( 'while' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:241:8: 'while'
    {
        this->matchs(lit_16);
        if  (this->hasException())
        {
            goto ruleWHILEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWHILEEx; /* Prevent compiler warnings */
    ruleWHILEEx: ;

}
// $ANTLR end WHILE

//   Comes from: 242:6: ( 'break' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BREAK
 *
 * Looks to match the characters the constitute the token BREAK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mBREAK()
{
    ANTLR_UINT32	_type;
      


    _type	    = BREAK;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:242:6: ( 'break' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:242:8: 'break'
    {
        this->matchs(lit_17);
        if  (this->hasException())
        {
            goto ruleBREAKEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleBREAKEx; /* Prevent compiler warnings */
    ruleBREAKEx: ;

}
// $ANTLR end BREAK

//   Comes from: 243:9: ( 'continue' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CONTINUE
 *
 * Looks to match the characters the constitute the token CONTINUE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mCONTINUE()
{
    ANTLR_UINT32	_type;
      


    _type	    = CONTINUE;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:243:9: ( 'continue' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:243:11: 'continue'
    {
        this->matchs(lit_18);
        if  (this->hasException())
        {
            goto ruleCONTINUEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCONTINUEEx; /* Prevent compiler warnings */
    ruleCONTINUEEx: ;

}
// $ANTLR end CONTINUE

//   Comes from: 245:13: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_DOT
 *
 * Looks to match the characters the constitute the token OPERATOR_DOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_DOT()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_DOT;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:245:13: ( '.' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:245:15: '.'
    {
         this->matchc('.');
        if  (this->hasException())
        {
            goto ruleOPERATOR_DOTEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_DOTEx; /* Prevent compiler warnings */
    ruleOPERATOR_DOTEx: ;

}
// $ANTLR end OPERATOR_DOT

//   Comes from: 246:19: ( '++' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_INCREMENT
 *
 * Looks to match the characters the constitute the token OPERATOR_INCREMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_INCREMENT()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_INCREMENT;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:246:19: ( '++' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:246:21: '++'
    {
        this->matchs(lit_19);
        if  (this->hasException())
        {
            goto ruleOPERATOR_INCREMENTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_INCREMENTEx; /* Prevent compiler warnings */
    ruleOPERATOR_INCREMENTEx: ;

}
// $ANTLR end OPERATOR_INCREMENT

//   Comes from: 247:19: ( '--' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_DECREMENT
 *
 * Looks to match the characters the constitute the token OPERATOR_DECREMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_DECREMENT()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_DECREMENT;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:247:19: ( '--' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:247:21: '--'
    {
        this->matchs(lit_20);
        if  (this->hasException())
        {
            goto ruleOPERATOR_DECREMENTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_DECREMENTEx; /* Prevent compiler warnings */
    ruleOPERATOR_DECREMENTEx: ;

}
// $ANTLR end OPERATOR_DECREMENT

//   Comes from: 248:13: ( '!' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_NOT
 *
 * Looks to match the characters the constitute the token OPERATOR_NOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_NOT()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_NOT;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:248:13: ( '!' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:248:15: '!'
    {
         this->matchc('!');
        if  (this->hasException())
        {
            goto ruleOPERATOR_NOTEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_NOTEx; /* Prevent compiler warnings */
    ruleOPERATOR_NOTEx: ;

}
// $ANTLR end OPERATOR_NOT

//   Comes from: 249:15: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_TIMES
 *
 * Looks to match the characters the constitute the token OPERATOR_TIMES
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_TIMES()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_TIMES;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:249:15: ( '*' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:249:17: '*'
    {
         this->matchc('*');
        if  (this->hasException())
        {
            goto ruleOPERATOR_TIMESEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_TIMESEx; /* Prevent compiler warnings */
    ruleOPERATOR_TIMESEx: ;

}
// $ANTLR end OPERATOR_TIMES

//   Comes from: 250:16: ( '/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_DIVIDE
 *
 * Looks to match the characters the constitute the token OPERATOR_DIVIDE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_DIVIDE()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_DIVIDE;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:250:16: ( '/' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:250:18: '/'
    {
         this->matchc('/');
        if  (this->hasException())
        {
            goto ruleOPERATOR_DIVIDEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_DIVIDEEx; /* Prevent compiler warnings */
    ruleOPERATOR_DIVIDEEx: ;

}
// $ANTLR end OPERATOR_DIVIDE

//   Comes from: 251:16: ( '%' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_MODULO
 *
 * Looks to match the characters the constitute the token OPERATOR_MODULO
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_MODULO()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_MODULO;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:251:16: ( '%' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:251:18: '%'
    {
         this->matchc('%');
        if  (this->hasException())
        {
            goto ruleOPERATOR_MODULOEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_MODULOEx; /* Prevent compiler warnings */
    ruleOPERATOR_MODULOEx: ;

}
// $ANTLR end OPERATOR_MODULO

//   Comes from: 252:14: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_PLUS
 *
 * Looks to match the characters the constitute the token OPERATOR_PLUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_PLUS()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_PLUS;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:252:14: ( '+' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:252:16: '+'
    {
         this->matchc('+');
        if  (this->hasException())
        {
            goto ruleOPERATOR_PLUSEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_PLUSEx; /* Prevent compiler warnings */
    ruleOPERATOR_PLUSEx: ;

}
// $ANTLR end OPERATOR_PLUS

//   Comes from: 253:15: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_MINUS
 *
 * Looks to match the characters the constitute the token OPERATOR_MINUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_MINUS()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_MINUS;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:253:15: ( '-' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:253:17: '-'
    {
         this->matchc('-');
        if  (this->hasException())
        {
            goto ruleOPERATOR_MINUSEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_MINUSEx; /* Prevent compiler warnings */
    ruleOPERATOR_MINUSEx: ;

}
// $ANTLR end OPERATOR_MINUS

//   Comes from: 254:16: ( '<<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_LSHIFT
 *
 * Looks to match the characters the constitute the token OPERATOR_LSHIFT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_LSHIFT()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_LSHIFT;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:254:16: ( '<<' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:254:18: '<<'
    {
        this->matchs(lit_21);
        if  (this->hasException())
        {
            goto ruleOPERATOR_LSHIFTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_LSHIFTEx; /* Prevent compiler warnings */
    ruleOPERATOR_LSHIFTEx: ;

}
// $ANTLR end OPERATOR_LSHIFT

//   Comes from: 255:16: ( '>>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_RSHIFT
 *
 * Looks to match the characters the constitute the token OPERATOR_RSHIFT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_RSHIFT()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_RSHIFT;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:255:16: ( '>>' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:255:18: '>>'
    {
        this->matchs(lit_22);
        if  (this->hasException())
        {
            goto ruleOPERATOR_RSHIFTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_RSHIFTEx; /* Prevent compiler warnings */
    ruleOPERATOR_RSHIFTEx: ;

}
// $ANTLR end OPERATOR_RSHIFT

//   Comes from: 256:19: ( '<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_LESS_THAN
 *
 * Looks to match the characters the constitute the token OPERATOR_LESS_THAN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_LESS_THAN()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_LESS_THAN;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:256:19: ( '<' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:256:21: '<'
    {
         this->matchc('<');
        if  (this->hasException())
        {
            goto ruleOPERATOR_LESS_THANEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_LESS_THANEx; /* Prevent compiler warnings */
    ruleOPERATOR_LESS_THANEx: ;

}
// $ANTLR end OPERATOR_LESS_THAN

//   Comes from: 257:22: ( '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_GREATER_THAN
 *
 * Looks to match the characters the constitute the token OPERATOR_GREATER_THAN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_GREATER_THAN()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_GREATER_THAN;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:257:22: ( '>' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:257:24: '>'
    {
         this->matchc('>');
        if  (this->hasException())
        {
            goto ruleOPERATOR_GREATER_THANEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_GREATER_THANEx; /* Prevent compiler warnings */
    ruleOPERATOR_GREATER_THANEx: ;

}
// $ANTLR end OPERATOR_GREATER_THAN

//   Comes from: 258:31: ( '<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_LESS_THAN_OR_EQUAL_TO
 *
 * Looks to match the characters the constitute the token OPERATOR_LESS_THAN_OR_EQUAL_TO
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_LESS_THAN_OR_EQUAL_TO()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_LESS_THAN_OR_EQUAL_TO;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:258:31: ( '<=' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:258:33: '<='
    {
        this->matchs(lit_23);
        if  (this->hasException())
        {
            goto ruleOPERATOR_LESS_THAN_OR_EQUAL_TOEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_LESS_THAN_OR_EQUAL_TOEx; /* Prevent compiler warnings */
    ruleOPERATOR_LESS_THAN_OR_EQUAL_TOEx: ;

}
// $ANTLR end OPERATOR_LESS_THAN_OR_EQUAL_TO

//   Comes from: 259:34: ( '>=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_GREATER_THAN_OR_EQUAL_TO
 *
 * Looks to match the characters the constitute the token OPERATOR_GREATER_THAN_OR_EQUAL_TO
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_GREATER_THAN_OR_EQUAL_TO()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_GREATER_THAN_OR_EQUAL_TO;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:259:34: ( '>=' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:259:36: '>='
    {
        this->matchs(lit_24);
        if  (this->hasException())
        {
            goto ruleOPERATOR_GREATER_THAN_OR_EQUAL_TOEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_GREATER_THAN_OR_EQUAL_TOEx; /* Prevent compiler warnings */
    ruleOPERATOR_GREATER_THAN_OR_EQUAL_TOEx: ;

}
// $ANTLR end OPERATOR_GREATER_THAN_OR_EQUAL_TO

//   Comes from: 260:18: ( '==' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_EQUAL_TO
 *
 * Looks to match the characters the constitute the token OPERATOR_EQUAL_TO
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_EQUAL_TO()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_EQUAL_TO;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:260:18: ( '==' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:260:20: '=='
    {
        this->matchs(lit_25);
        if  (this->hasException())
        {
            goto ruleOPERATOR_EQUAL_TOEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_EQUAL_TOEx; /* Prevent compiler warnings */
    ruleOPERATOR_EQUAL_TOEx: ;

}
// $ANTLR end OPERATOR_EQUAL_TO

//   Comes from: 261:22: ( '!=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_NOT_EQUAL_TO
 *
 * Looks to match the characters the constitute the token OPERATOR_NOT_EQUAL_TO
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_NOT_EQUAL_TO()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_NOT_EQUAL_TO;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:261:22: ( '!=' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:261:24: '!='
    {
        this->matchs(lit_26);
        if  (this->hasException())
        {
            goto ruleOPERATOR_NOT_EQUAL_TOEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_NOT_EQUAL_TOEx; /* Prevent compiler warnings */
    ruleOPERATOR_NOT_EQUAL_TOEx: ;

}
// $ANTLR end OPERATOR_NOT_EQUAL_TO

//   Comes from: 262:17: ( '&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_BIT_AND
 *
 * Looks to match the characters the constitute the token OPERATOR_BIT_AND
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_BIT_AND()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_BIT_AND;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:262:17: ( '&' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:262:19: '&'
    {
         this->matchc('&');
        if  (this->hasException())
        {
            goto ruleOPERATOR_BIT_ANDEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_BIT_ANDEx; /* Prevent compiler warnings */
    ruleOPERATOR_BIT_ANDEx: ;

}
// $ANTLR end OPERATOR_BIT_AND

//   Comes from: 263:17: ( '^' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_BIT_XOR
 *
 * Looks to match the characters the constitute the token OPERATOR_BIT_XOR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_BIT_XOR()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_BIT_XOR;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:263:17: ( '^' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:263:19: '^'
    {
         this->matchc('^');
        if  (this->hasException())
        {
            goto ruleOPERATOR_BIT_XOREx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_BIT_XOREx; /* Prevent compiler warnings */
    ruleOPERATOR_BIT_XOREx: ;

}
// $ANTLR end OPERATOR_BIT_XOR

//   Comes from: 264:16: ( '|' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_BIT_OR
 *
 * Looks to match the characters the constitute the token OPERATOR_BIT_OR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_BIT_OR()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_BIT_OR;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:264:16: ( '|' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:264:18: '|'
    {
         this->matchc('|');
        if  (this->hasException())
        {
            goto ruleOPERATOR_BIT_OREx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_BIT_OREx; /* Prevent compiler warnings */
    ruleOPERATOR_BIT_OREx: ;

}
// $ANTLR end OPERATOR_BIT_OR

//   Comes from: 265:17: ( '&&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_REL_AND
 *
 * Looks to match the characters the constitute the token OPERATOR_REL_AND
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_REL_AND()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_REL_AND;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:265:17: ( '&&' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:265:19: '&&'
    {
        this->matchs(lit_27);
        if  (this->hasException())
        {
            goto ruleOPERATOR_REL_ANDEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_REL_ANDEx; /* Prevent compiler warnings */
    ruleOPERATOR_REL_ANDEx: ;

}
// $ANTLR end OPERATOR_REL_AND

//   Comes from: 266:16: ( '||' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_REL_OR
 *
 * Looks to match the characters the constitute the token OPERATOR_REL_OR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_REL_OR()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_REL_OR;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:266:16: ( '||' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:266:18: '||'
    {
        this->matchs(lit_28);
        if  (this->hasException())
        {
            goto ruleOPERATOR_REL_OREx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_REL_OREx; /* Prevent compiler warnings */
    ruleOPERATOR_REL_OREx: ;

}
// $ANTLR end OPERATOR_REL_OR

//   Comes from: 267:17: ( '?' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_EXPR_IF
 *
 * Looks to match the characters the constitute the token OPERATOR_EXPR_IF
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_EXPR_IF()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_EXPR_IF;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:267:17: ( '?' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:267:19: '?'
    {
         this->matchc('?');
        if  (this->hasException())
        {
            goto ruleOPERATOR_EXPR_IFEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_EXPR_IFEx; /* Prevent compiler warnings */
    ruleOPERATOR_EXPR_IFEx: ;

}
// $ANTLR end OPERATOR_EXPR_IF

//   Comes from: 268:16: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_ASSIGN
 *
 * Looks to match the characters the constitute the token OPERATOR_ASSIGN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_ASSIGN()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_ASSIGN;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:268:16: ( '=' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:268:18: '='
    {
         this->matchc('=');
        if  (this->hasException())
        {
            goto ruleOPERATOR_ASSIGNEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_ASSIGNEx; /* Prevent compiler warnings */
    ruleOPERATOR_ASSIGNEx: ;

}
// $ANTLR end OPERATOR_ASSIGN

//   Comes from: 269:21: ( '+=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_ASSIGN_PLUS
 *
 * Looks to match the characters the constitute the token OPERATOR_ASSIGN_PLUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_ASSIGN_PLUS()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_ASSIGN_PLUS;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:269:21: ( '+=' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:269:23: '+='
    {
        this->matchs(lit_29);
        if  (this->hasException())
        {
            goto ruleOPERATOR_ASSIGN_PLUSEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_ASSIGN_PLUSEx; /* Prevent compiler warnings */
    ruleOPERATOR_ASSIGN_PLUSEx: ;

}
// $ANTLR end OPERATOR_ASSIGN_PLUS

//   Comes from: 270:22: ( '-=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_ASSIGN_MINUS
 *
 * Looks to match the characters the constitute the token OPERATOR_ASSIGN_MINUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_ASSIGN_MINUS()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_ASSIGN_MINUS;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:270:22: ( '-=' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:270:24: '-='
    {
        this->matchs(lit_30);
        if  (this->hasException())
        {
            goto ruleOPERATOR_ASSIGN_MINUSEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_ASSIGN_MINUSEx; /* Prevent compiler warnings */
    ruleOPERATOR_ASSIGN_MINUSEx: ;

}
// $ANTLR end OPERATOR_ASSIGN_MINUS

//   Comes from: 271:22: ( '*=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_ASSIGN_TIMES
 *
 * Looks to match the characters the constitute the token OPERATOR_ASSIGN_TIMES
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_ASSIGN_TIMES()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_ASSIGN_TIMES;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:271:22: ( '*=' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:271:24: '*='
    {
        this->matchs(lit_31);
        if  (this->hasException())
        {
            goto ruleOPERATOR_ASSIGN_TIMESEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_ASSIGN_TIMESEx; /* Prevent compiler warnings */
    ruleOPERATOR_ASSIGN_TIMESEx: ;

}
// $ANTLR end OPERATOR_ASSIGN_TIMES

//   Comes from: 272:23: ( '/=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_ASSIGN_DIVIDE
 *
 * Looks to match the characters the constitute the token OPERATOR_ASSIGN_DIVIDE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_ASSIGN_DIVIDE()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_ASSIGN_DIVIDE;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:272:23: ( '/=' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:272:25: '/='
    {
        this->matchs(lit_32);
        if  (this->hasException())
        {
            goto ruleOPERATOR_ASSIGN_DIVIDEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_ASSIGN_DIVIDEEx; /* Prevent compiler warnings */
    ruleOPERATOR_ASSIGN_DIVIDEEx: ;

}
// $ANTLR end OPERATOR_ASSIGN_DIVIDE

//   Comes from: 273:23: ( '%=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_ASSIGN_MODULO
 *
 * Looks to match the characters the constitute the token OPERATOR_ASSIGN_MODULO
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_ASSIGN_MODULO()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_ASSIGN_MODULO;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:273:23: ( '%=' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:273:25: '%='
    {
        this->matchs(lit_33);
        if  (this->hasException())
        {
            goto ruleOPERATOR_ASSIGN_MODULOEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_ASSIGN_MODULOEx; /* Prevent compiler warnings */
    ruleOPERATOR_ASSIGN_MODULOEx: ;

}
// $ANTLR end OPERATOR_ASSIGN_MODULO

//   Comes from: 274:23: ( '<<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_ASSIGN_LSHIFT
 *
 * Looks to match the characters the constitute the token OPERATOR_ASSIGN_LSHIFT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_ASSIGN_LSHIFT()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_ASSIGN_LSHIFT;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:274:23: ( '<<=' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:274:25: '<<='
    {
        this->matchs(lit_34);
        if  (this->hasException())
        {
            goto ruleOPERATOR_ASSIGN_LSHIFTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_ASSIGN_LSHIFTEx; /* Prevent compiler warnings */
    ruleOPERATOR_ASSIGN_LSHIFTEx: ;

}
// $ANTLR end OPERATOR_ASSIGN_LSHIFT

//   Comes from: 275:23: ( '>>=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_ASSIGN_RSHIFT
 *
 * Looks to match the characters the constitute the token OPERATOR_ASSIGN_RSHIFT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_ASSIGN_RSHIFT()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_ASSIGN_RSHIFT;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:275:23: ( '>>=' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:275:25: '>>='
    {
        this->matchs(lit_35);
        if  (this->hasException())
        {
            goto ruleOPERATOR_ASSIGN_RSHIFTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_ASSIGN_RSHIFTEx; /* Prevent compiler warnings */
    ruleOPERATOR_ASSIGN_RSHIFTEx: ;

}
// $ANTLR end OPERATOR_ASSIGN_RSHIFT

//   Comes from: 276:20: ( '&=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_ASSIGN_AND
 *
 * Looks to match the characters the constitute the token OPERATOR_ASSIGN_AND
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_ASSIGN_AND()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_ASSIGN_AND;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:276:20: ( '&=' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:276:22: '&='
    {
        this->matchs(lit_36);
        if  (this->hasException())
        {
            goto ruleOPERATOR_ASSIGN_ANDEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_ASSIGN_ANDEx; /* Prevent compiler warnings */
    ruleOPERATOR_ASSIGN_ANDEx: ;

}
// $ANTLR end OPERATOR_ASSIGN_AND

//   Comes from: 277:20: ( '^=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_ASSIGN_XOR
 *
 * Looks to match the characters the constitute the token OPERATOR_ASSIGN_XOR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_ASSIGN_XOR()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_ASSIGN_XOR;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:277:20: ( '^=' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:277:22: '^='
    {
        this->matchs(lit_37);
        if  (this->hasException())
        {
            goto ruleOPERATOR_ASSIGN_XOREx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_ASSIGN_XOREx; /* Prevent compiler warnings */
    ruleOPERATOR_ASSIGN_XOREx: ;

}
// $ANTLR end OPERATOR_ASSIGN_XOR

//   Comes from: 278:19: ( '|=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_ASSIGN_OR
 *
 * Looks to match the characters the constitute the token OPERATOR_ASSIGN_OR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_ASSIGN_OR()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_ASSIGN_OR;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:278:19: ( '|=' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:278:21: '|='
    {
        this->matchs(lit_38);
        if  (this->hasException())
        {
            goto ruleOPERATOR_ASSIGN_OREx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_ASSIGN_OREx; /* Prevent compiler warnings */
    ruleOPERATOR_ASSIGN_OREx: ;

}
// $ANTLR end OPERATOR_ASSIGN_OR

//   Comes from: 279:12: ( 'is' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPERATOR_IS
 *
 * Looks to match the characters the constitute the token OPERATOR_IS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOPERATOR_IS()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPERATOR_IS;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:279:12: ( 'is' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:279:14: 'is'
    {
        this->matchs(lit_39);
        if  (this->hasException())
        {
            goto ruleOPERATOR_ISEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPERATOR_ISEx; /* Prevent compiler warnings */
    ruleOPERATOR_ISEx: ;

}
// $ANTLR end OPERATOR_IS

//   Comes from: 282:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mCOMMENT()
{
    ANTLR_UINT32	_type;
      


    _type	    = COMMENT;


    {
        //  D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:282:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )

        ANTLR_UINT32 alt4;

        alt4=2;

        switch ( this->LA(1) )
        {
        case '/':
        	{
        		switch ( this->LA(2) )
        		{
        		case '/':
        			{
        				alt4=1;
        			}
        		    break;
        		case '*':
        			{
        				alt4=2;
        			}
        		    break;

        		default:
        		    ExceptionBaseType* ex = new ANTLR_Exception< GeoGenScriptLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        		    ex->set_decisionNum( 4 );
        		    ex->set_state( 1 );


        		    goto ruleCOMMENTEx;

        		}

        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< GeoGenScriptLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 4 );
            ex->set_state( 0 );


            goto ruleCOMMENTEx;

        }

        switch (alt4)
        {
    	case 1:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:282:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    	    {
    	        this->matchs(lit_40);
    	        if  (this->hasException())
    	        {
    	            goto ruleCOMMENTEx;
    	        }




    	        // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:282:14: (~ ( '\\n' | '\\r' ) )*

    	        for (;;)
    	        {
    	            int alt1=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA1_0 = this->LA(1);
    	                if ( (((LA1_0 >= 0x0000) && (LA1_0 <= '\t')) || ((LA1_0 >= 0x000B) && (LA1_0 <= '\f')) || ((LA1_0 >= 0x000E) && (LA1_0 <= 0xFFFF))))
    	                {
    	                    alt1=1;
    	                }

    	            }
    	            switch (alt1)
    	            {
    	        	case 1:
    	        	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:
    	        	    {
    	        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '\t')) || ((this->LA(1) >= 0x000B) && (this->LA(1) <= '\f')) || ((this->LA(1) >= 0x000E) && (this->LA(1) <= 0xFFFF)) )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< GeoGenScriptLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop1;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop1: ; /* Jump out to here if this rule does not match */


    	        // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:282:28: ( '\\r' )?
    	        {
    	            int alt2=2;
    	            switch ( this->LA(1) )
    	            {
    	                case '\r':
    	                	{
    	                		alt2=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt2)
    	            {
    	        	case 1:
    	        	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:282:28: '\\r'
    	        	    {
    	        	         this->matchc('\r');
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	         this->matchc('\n');
    	        if  (this->hasException())
    	        {
    	            goto ruleCOMMENTEx;
    	        }


    	        {
    	            this->get_state()->get_channel()=HIDDEN;
    	        }


    	    }
    	    break;
    	case 2:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:283:9: '/*' ( options {greedy=false; } : . )* '*/'
    	    {
    	        this->matchs(lit_41);
    	        if  (this->hasException())
    	        {
    	            goto ruleCOMMENTEx;
    	        }




    	        // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:283:14: ( options {greedy=false; } : . )*

    	        for (;;)
    	        {
    	            int alt3=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA3_0 = this->LA(1);
    	                if ( (LA3_0 == '*'))
    	                {
    	                    {
    	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                        */
    	                        int LA3_1 = this->LA(2);
    	                        if ( (LA3_1 == '/'))
    	                        {
    	                            alt3=2;
    	                        }
    	                        else if ( (((LA3_1 >= 0x0000) && (LA3_1 <= '.')) || ((LA3_1 >= '0') && (LA3_1 <= 0xFFFF))))
    	                        {
    	                            alt3=1;
    	                        }

    	                    }
    	                }
    	                else if ( (((LA3_0 >= 0x0000) && (LA3_0 <= ')')) || ((LA3_0 >= '+') && (LA3_0 <= 0xFFFF))))
    	                {
    	                    alt3=1;
    	                }

    	            }
    	            switch (alt3)
    	            {
    	        	case 1:
    	        	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:283:42: .
    	        	    {
    	        	        this->matchAny();
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop3;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop3: ; /* Jump out to here if this rule does not match */


    	        this->matchs(lit_42);
    	        if  (this->hasException())
    	        {
    	            goto ruleCOMMENTEx;
    	        }




    	        {
    	            this->get_state()->get_channel()=HIDDEN;
    	        }


    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

//   Comes from: 286:11: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IDENTIFIER
 *
 * Looks to match the characters the constitute the token IDENTIFIER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mIDENTIFIER()
{
    ANTLR_UINT32	_type;
      


    _type	    = IDENTIFIER;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:286:11: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:286:13: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
    {
        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< GeoGenScriptLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleIDENTIFIEREx;
        }


        // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:286:40: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*

        for (;;)
        {
            int alt5=2;
            switch ( this->LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt5=1;
            	}
                break;

            }

            switch (alt5)
            {
        	case 1:
        	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:
        	    {
        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< GeoGenScriptLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleIDENTIFIEREx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop5;	/* break out of the loop */
        	    break;
            }
        }
        loop5: ; /* Jump out to here if this rule does not match */


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleIDENTIFIEREx; /* Prevent compiler warnings */
    ruleIDENTIFIEREx: ;

}
// $ANTLR end IDENTIFIER

//   Comes from: 288:17: ( ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INTEGER
 *
 * Looks to match the characters the constitute the token INTEGER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mINTEGER()
{
    ANTLR_UINT32	_type;
      



    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:288:17: ( ( '0' .. '9' )+ )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:288:19: ( '0' .. '9' )+
    {
        // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:288:19: ( '0' .. '9' )+
        {
            int cnt6=0;

            for (;;)
            {
                int alt6=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt6=1;
        		}
        	    break;

        	}

        	switch (alt6)
        	{
        	    case 1:
        	        // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< GeoGenScriptLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleINTEGEREx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt6 >= 1 )
        		{
        		    goto loop6;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< GeoGenScriptLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleINTEGEREx;
        	}
        	cnt6++;
            }
            loop6: ;	/* Jump to here if this rule does not match */
        }

    }


    // This is where rules clean up and exit
    //
    goto ruleINTEGEREx; /* Prevent compiler warnings */
    ruleINTEGEREx: ;

}
// $ANTLR end INTEGER

//   Comes from: 290:7: ( INTEGER ( '.' INTEGER )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NUMBER
 *
 * Looks to match the characters the constitute the token NUMBER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mNUMBER()
{
    ANTLR_UINT32	_type;
      


    _type	    = NUMBER;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:290:7: ( INTEGER ( '.' INTEGER )? )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:290:9: INTEGER ( '.' INTEGER )?
    {
        /* 290:9: INTEGER ( '.' INTEGER )? */
        mINTEGER();
        if  (this->hasException())
        {
            goto ruleNUMBEREx;
        }



        // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:290:17: ( '.' INTEGER )?
        {
            int alt7=2;
            switch ( this->LA(1) )
            {
                case '.':
                	{
                		alt7=1;
                	}
                    break;
            }

            switch (alt7)
            {
        	case 1:
        	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:290:18: '.' INTEGER
        	    {
        	         this->matchc('.');
        	        if  (this->hasException())
        	        {
        	            goto ruleNUMBEREx;
        	        }


        	        /* 290:18: '.' INTEGER */
        	        mINTEGER();
        	        if  (this->hasException())
        	        {
        	            goto ruleNUMBEREx;
        	        }



        	    }
        	    break;

            }
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleNUMBEREx; /* Prevent compiler warnings */
    ruleNUMBEREx: ;

}
// $ANTLR end NUMBER

//   Comes from: 293:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING
 *
 * Looks to match the characters the constitute the token STRING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mSTRING()
{
    ANTLR_UINT32	_type;
      


    _type	    = STRING;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:293:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:293:8: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
    {
         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleSTRINGEx;
        }


        // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:293:12: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*

        for (;;)
        {
            int alt8=3;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA8_0 = this->LA(1);
                if ( (LA8_0 == '\\'))
                {
                    alt8=1;
                }
                else if ( (((LA8_0 >= 0x0000) && (LA8_0 <= '!')) || ((LA8_0 >= '#') && (LA8_0 <= '[')) || ((LA8_0 >= ']') && (LA8_0 <= 0xFFFF))))
                {
                    alt8=2;
                }

            }
            switch (alt8)
            {
        	case 1:
        	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:293:14: ESC_SEQ
        	    {
        	        /* 293:14: ESC_SEQ */
        	        mESC_SEQ();
        	        if  (this->hasException())
        	        {
        	            goto ruleSTRINGEx;
        	        }



        	    }
        	    break;
        	case 2:
        	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:293:24: ~ ( '\\\\' | '\"' )
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '!')) || ((this->LA(1) >= '#') && (this->LA(1) <= '[')) || ((this->LA(1) >= ']') && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< GeoGenScriptLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleSTRINGEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop8;	/* break out of the loop */
        	    break;
            }
        }
        loop8: ; /* Jump out to here if this rule does not match */


         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleSTRINGEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleSTRINGEx; /* Prevent compiler warnings */
    ruleSTRINGEx: ;

}
// $ANTLR end STRING

//   Comes from: 298:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HEX_DIGIT
 *
 * Looks to match the characters the constitute the token HEX_DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mHEX_DIGIT()
{
    ANTLR_UINT32	_type;
      



    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:298:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:
    {
        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'F')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'f')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< GeoGenScriptLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleHEX_DIGITEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleHEX_DIGITEx; /* Prevent compiler warnings */
    ruleHEX_DIGITEx: ;

}
// $ANTLR end HEX_DIGIT

//   Comes from: 302:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ESC_SEQ
 *
 * Looks to match the characters the constitute the token ESC_SEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mESC_SEQ()
{
    ANTLR_UINT32	_type;
      



    {
        //  D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:302:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )

        ANTLR_UINT32 alt9;

        alt9=3;

        switch ( this->LA(1) )
        {
        case '\\':
        	{
        		switch ( this->LA(2) )
        		{
        		case '"':
        		case '\'':
        		case '\\':
        		case 'b':
        		case 'f':
        		case 'n':
        		case 'r':
        		case 't':
        			{
        				alt9=1;
        			}
        		    break;
        		case 'u':
        			{
        				alt9=2;
        			}
        		    break;
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				alt9=3;
        			}
        		    break;

        		default:
        		    ExceptionBaseType* ex = new ANTLR_Exception< GeoGenScriptLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        		    ex->set_decisionNum( 9 );
        		    ex->set_state( 1 );


        		    goto ruleESC_SEQEx;

        		}

        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< GeoGenScriptLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 9 );
            ex->set_state( 0 );


            goto ruleESC_SEQEx;

        }

        switch (alt9)
        {
    	case 1:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:302:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleESC_SEQEx;
    	        }


    	        if ( this->LA(1) == '"' || this->LA(1) == '\'' || this->LA(1) == '\\' || this->LA(1) == 'b' || this->LA(1) == 'f' || this->LA(1) == 'n' || this->LA(1) == 'r' || this->LA(1) == 't' )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< GeoGenScriptLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleESC_SEQEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:303:9: UNICODE_ESC
    	    {
    	        /* 303:9: UNICODE_ESC */
    	        mUNICODE_ESC();
    	        if  (this->hasException())
    	        {
    	            goto ruleESC_SEQEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:304:9: OCTAL_ESC
    	    {
    	        /* 304:9: OCTAL_ESC */
    	        mOCTAL_ESC();
    	        if  (this->hasException())
    	        {
    	            goto ruleESC_SEQEx;
    	        }



    	    }
    	    break;

        }
    }

    // This is where rules clean up and exit
    //
    goto ruleESC_SEQEx; /* Prevent compiler warnings */
    ruleESC_SEQEx: ;

}
// $ANTLR end ESC_SEQ

//   Comes from: 309:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OCTAL_ESC
 *
 * Looks to match the characters the constitute the token OCTAL_ESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mOCTAL_ESC()
{
    ANTLR_UINT32	_type;
      



    {
        //  D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:309:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )

        ANTLR_UINT32 alt10;

        alt10=3;

        switch ( this->LA(1) )
        {
        case '\\':
        	{
        		switch ( this->LA(2) )
        		{
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        			{
        				switch ( this->LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						switch ( this->LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        							{
        								alt10=1;
        							}
        						    break;

        						default:
        						    alt10=2;
        						}

        					}
        				    break;

        				default:
        				    alt10=3;
        				}

        			}
        		    break;
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				switch ( this->LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						alt10=2;
        					}
        				    break;

        				default:
        				    alt10=3;
        				}

        			}
        		    break;

        		default:
        		    ExceptionBaseType* ex = new ANTLR_Exception< GeoGenScriptLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        		    ex->set_decisionNum( 10 );
        		    ex->set_state( 1 );


        		    goto ruleOCTAL_ESCEx;

        		}

        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< GeoGenScriptLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 10 );
            ex->set_state( 0 );


            goto ruleOCTAL_ESCEx;

        }

        switch (alt10)
        {
    	case 1:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:309:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '3')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< GeoGenScriptLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< GeoGenScriptLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< GeoGenScriptLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:310:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< GeoGenScriptLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< GeoGenScriptLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:311:9: '\\\\' ( '0' .. '7' )
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< GeoGenScriptLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	    }
    	    break;

        }
    }

    // This is where rules clean up and exit
    //
    goto ruleOCTAL_ESCEx; /* Prevent compiler warnings */
    ruleOCTAL_ESCEx: ;

}
// $ANTLR end OCTAL_ESC

//   Comes from: 316:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UNICODE_ESC
 *
 * Looks to match the characters the constitute the token UNICODE_ESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mUNICODE_ESC()
{
    ANTLR_UINT32	_type;
      



    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:316:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:316:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    {
         this->matchc('\\');
        if  (this->hasException())
        {
            goto ruleUNICODE_ESCEx;
        }


         this->matchc('u');
        if  (this->hasException())
        {
            goto ruleUNICODE_ESCEx;
        }


        /* 316:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT();
        if  (this->hasException())
        {
            goto ruleUNICODE_ESCEx;
        }



        /* 316:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT();
        if  (this->hasException())
        {
            goto ruleUNICODE_ESCEx;
        }



        /* 316:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT();
        if  (this->hasException())
        {
            goto ruleUNICODE_ESCEx;
        }



        /* 316:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT();
        if  (this->hasException())
        {
            goto ruleUNICODE_ESCEx;
        }



    }


    // This is where rules clean up and exit
    //
    goto ruleUNICODE_ESCEx; /* Prevent compiler warnings */
    ruleUNICODE_ESCEx: ;

}
// $ANTLR end UNICODE_ESC

//   Comes from: 318:11: ( ( ' ' | '\\t' | '\\n' | '\\r' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WHITESPACE
 *
 * Looks to match the characters the constitute the token WHITESPACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void GeoGenScriptLexer::mWHITESPACE()
{
    ANTLR_UINT32	_type;
      


    _type	    = WHITESPACE;


    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:318:11: ( ( ' ' | '\\t' | '\\n' | '\\r' )+ )
    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:318:13: ( ' ' | '\\t' | '\\n' | '\\r' )+
    {
        // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:318:13: ( ' ' | '\\t' | '\\n' | '\\r' )+
        {
            int cnt11=0;

            for (;;)
            {
                int alt11=2;
        	switch ( this->LA(1) )
        	{
        	case '\t':
        	case '\n':
        	case '\r':
        	case ' ':
        		{
        			alt11=1;
        		}
        	    break;

        	}

        	switch (alt11)
        	{
        	    case 1:
        	        // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:
        	        {
        	            if ( ((this->LA(1) >= '\t') && (this->LA(1) <= '\n')) || this->LA(1) == '\r' || this->LA(1) == ' ' )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< GeoGenScriptLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleWHITESPACEEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt11 >= 1 )
        		{
        		    goto loop11;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< GeoGenScriptLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleWHITESPACEEx;
        	}
        	cnt11++;
            }
            loop11: ;	/* Jump to here if this rule does not match */
        }

        {
            skip();
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWHITESPACEEx; /* Prevent compiler warnings */
    ruleWHITESPACEEx: ;

}
// $ANTLR end WHITESPACE

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
void
GeoGenScriptLexer::mTokens()
{
    {
        //  D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:8: ( LEFT_BRACKET | RIGHT_BRACKET | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | LEFT_CURLY_BRACKET | RIGTH_CURLY_BRACKET | TRUE_LIT | FALSE_LIT | COMMA | SEMICOLON | COLON | AT | METADATA | ENUM | FUNCTION | VAR | RETURN | YIELD | AS | SWITCH | DEFAULT | CASE | IF | ELSE | FOR | WHILE | BREAK | CONTINUE | OPERATOR_DOT | OPERATOR_INCREMENT | OPERATOR_DECREMENT | OPERATOR_NOT | OPERATOR_TIMES | OPERATOR_DIVIDE | OPERATOR_MODULO | OPERATOR_PLUS | OPERATOR_MINUS | OPERATOR_LSHIFT | OPERATOR_RSHIFT | OPERATOR_LESS_THAN | OPERATOR_GREATER_THAN | OPERATOR_LESS_THAN_OR_EQUAL_TO | OPERATOR_GREATER_THAN_OR_EQUAL_TO | OPERATOR_EQUAL_TO | OPERATOR_NOT_EQUAL_TO | OPERATOR_BIT_AND | OPERATOR_BIT_XOR | OPERATOR_BIT_OR | OPERATOR_REL_AND | OPERATOR_REL_OR | OPERATOR_EXPR_IF | OPERATOR_ASSIGN | OPERATOR_ASSIGN_PLUS | OPERATOR_ASSIGN_MINUS | OPERATOR_ASSIGN_TIMES | OPERATOR_ASSIGN_DIVIDE | OPERATOR_ASSIGN_MODULO | OPERATOR_ASSIGN_LSHIFT | OPERATOR_ASSIGN_RSHIFT | OPERATOR_ASSIGN_AND | OPERATOR_ASSIGN_XOR | OPERATOR_ASSIGN_OR | OPERATOR_IS | COMMENT | IDENTIFIER | NUMBER | STRING | WHITESPACE )

        ANTLR_UINT32 alt12;

        alt12=68;

        switch ( this->LA(1) )
        {
        case '(':
        	{
        		alt12=1;
        	}
            break;
        case ')':
        	{
        		alt12=2;
        	}
            break;
        case '[':
        	{
        		alt12=3;
        	}
            break;
        case ']':
        	{
        		alt12=4;
        	}
            break;
        case '{':
        	{
        		alt12=5;
        	}
            break;
        case '}':
        	{
        		alt12=6;
        	}
            break;
        case 't':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'r':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'u':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'e':
        							{
        								switch ( this->LA(5) )
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt12=65;
        									}
        								    break;

        								default:
        								    alt12=7;
        								}

        							}
        						    break;

        						default:
        						    alt12=65;
        						}

        					}
        				    break;

        				default:
        				    alt12=65;
        				}

        			}
        		    break;

        		default:
        		    alt12=65;
        		}

        	}
            break;
        case 'f':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'a':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'l':
        					{
        						switch ( this->LA(4) )
        						{
        						case 's':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt12=65;
        											}
        										    break;

        										default:
        										    alt12=8;
        										}

        									}
        								    break;

        								default:
        								    alt12=65;
        								}

        							}
        						    break;

        						default:
        						    alt12=65;
        						}

        					}
        				    break;

        				default:
        				    alt12=65;
        				}

        			}
        		    break;
        		case 'u':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'n':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'c':
        							{
        								switch ( this->LA(5) )
        								{
        								case 't':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'i':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'o':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'n':
        															{
        																switch ( this->LA(9) )
        																{
        																case '0':
        																case '1':
        																case '2':
        																case '3':
        																case '4':
        																case '5':
        																case '6':
        																case '7':
        																case '8':
        																case '9':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt12=65;
        																	}
        																    break;

        																default:
        																    alt12=15;
        																}

        															}
        														    break;

        														default:
        														    alt12=65;
        														}

        													}
        												    break;

        												default:
        												    alt12=65;
        												}

        											}
        										    break;

        										default:
        										    alt12=65;
        										}

        									}
        								    break;

        								default:
        								    alt12=65;
        								}

        							}
        						    break;

        						default:
        						    alt12=65;
        						}

        					}
        				    break;

        				default:
        				    alt12=65;
        				}

        			}
        		    break;
        		case 'o':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'r':
        					{
        						switch ( this->LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt12=65;
        							}
        						    break;

        						default:
        						    alt12=25;
        						}

        					}
        				    break;

        				default:
        				    alt12=65;
        				}

        			}
        		    break;

        		default:
        		    alt12=65;
        		}

        	}
            break;
        case ',':
        	{
        		alt12=9;
        	}
            break;
        case ';':
        	{
        		alt12=10;
        	}
            break;
        case ':':
        	{
        		alt12=11;
        	}
            break;
        case '@':
        	{
        		alt12=12;
        	}
            break;
        case 'm':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'e':
        			{
        				switch ( this->LA(3) )
        				{
        				case 't':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'a':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'd':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'a':
        											{
        												switch ( this->LA(7) )
        												{
        												case 't':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'a':
        															{
        																switch ( this->LA(9) )
        																{
        																case '0':
        																case '1':
        																case '2':
        																case '3':
        																case '4':
        																case '5':
        																case '6':
        																case '7':
        																case '8':
        																case '9':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt12=65;
        																	}
        																    break;

        																default:
        																    alt12=13;
        																}

        															}
        														    break;

        														default:
        														    alt12=65;
        														}

        													}
        												    break;

        												default:
        												    alt12=65;
        												}

        											}
        										    break;

        										default:
        										    alt12=65;
        										}

        									}
        								    break;

        								default:
        								    alt12=65;
        								}

        							}
        						    break;

        						default:
        						    alt12=65;
        						}

        					}
        				    break;

        				default:
        				    alt12=65;
        				}

        			}
        		    break;

        		default:
        		    alt12=65;
        		}

        	}
            break;
        case 'e':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'n':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'u':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'm':
        							{
        								switch ( this->LA(5) )
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt12=65;
        									}
        								    break;

        								default:
        								    alt12=14;
        								}

        							}
        						    break;

        						default:
        						    alt12=65;
        						}

        					}
        				    break;

        				default:
        				    alt12=65;
        				}

        			}
        		    break;
        		case 'l':
        			{
        				switch ( this->LA(3) )
        				{
        				case 's':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'e':
        							{
        								switch ( this->LA(5) )
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt12=65;
        									}
        								    break;

        								default:
        								    alt12=24;
        								}

        							}
        						    break;

        						default:
        						    alt12=65;
        						}

        					}
        				    break;

        				default:
        				    alt12=65;
        				}

        			}
        		    break;

        		default:
        		    alt12=65;
        		}

        	}
            break;
        case 'v':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'a':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'r':
        					{
        						switch ( this->LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt12=65;
        							}
        						    break;

        						default:
        						    alt12=16;
        						}

        					}
        				    break;

        				default:
        				    alt12=65;
        				}

        			}
        		    break;

        		default:
        		    alt12=65;
        		}

        	}
            break;
        case 'r':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'e':
        			{
        				switch ( this->LA(3) )
        				{
        				case 't':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'u':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'r':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'n':
        											{
        												switch ( this->LA(7) )
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt12=65;
        													}
        												    break;

        												default:
        												    alt12=17;
        												}

        											}
        										    break;

        										default:
        										    alt12=65;
        										}

        									}
        								    break;

        								default:
        								    alt12=65;
        								}

        							}
        						    break;

        						default:
        						    alt12=65;
        						}

        					}
        				    break;

        				default:
        				    alt12=65;
        				}

        			}
        		    break;

        		default:
        		    alt12=65;
        		}

        	}
            break;
        case 'y':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'i':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'e':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'l':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'd':
        									{
        										switch ( this->LA(6) )
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt12=65;
        											}
        										    break;

        										default:
        										    alt12=18;
        										}

        									}
        								    break;

        								default:
        								    alt12=65;
        								}

        							}
        						    break;

        						default:
        						    alt12=65;
        						}

        					}
        				    break;

        				default:
        				    alt12=65;
        				}

        			}
        		    break;

        		default:
        		    alt12=65;
        		}

        	}
            break;
        case 'a':
        	{
        		switch ( this->LA(2) )
        		{
        		case 's':
        			{
        				switch ( this->LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt12=65;
        					}
        				    break;

        				default:
        				    alt12=19;
        				}

        			}
        		    break;

        		default:
        		    alt12=65;
        		}

        	}
            break;
        case 's':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'w':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'i':
        					{
        						switch ( this->LA(4) )
        						{
        						case 't':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'c':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'h':
        											{
        												switch ( this->LA(7) )
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt12=65;
        													}
        												    break;

        												default:
        												    alt12=20;
        												}

        											}
        										    break;

        										default:
        										    alt12=65;
        										}

        									}
        								    break;

        								default:
        								    alt12=65;
        								}

        							}
        						    break;

        						default:
        						    alt12=65;
        						}

        					}
        				    break;

        				default:
        				    alt12=65;
        				}

        			}
        		    break;

        		default:
        		    alt12=65;
        		}

        	}
            break;
        case 'd':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'e':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'f':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'a':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'u':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'l':
        											{
        												switch ( this->LA(7) )
        												{
        												case 't':
        													{
        														switch ( this->LA(8) )
        														{
        														case '0':
        														case '1':
        														case '2':
        														case '3':
        														case '4':
        														case '5':
        														case '6':
        														case '7':
        														case '8':
        														case '9':
        														case 'A':
        														case 'B':
        														case 'C':
        														case 'D':
        														case 'E':
        														case 'F':
        														case 'G':
        														case 'H':
        														case 'I':
        														case 'J':
        														case 'K':
        														case 'L':
        														case 'M':
        														case 'N':
        														case 'O':
        														case 'P':
        														case 'Q':
        														case 'R':
        														case 'S':
        														case 'T':
        														case 'U':
        														case 'V':
        														case 'W':
        														case 'X':
        														case 'Y':
        														case 'Z':
        														case '_':
        														case 'a':
        														case 'b':
        														case 'c':
        														case 'd':
        														case 'e':
        														case 'f':
        														case 'g':
        														case 'h':
        														case 'i':
        														case 'j':
        														case 'k':
        														case 'l':
        														case 'm':
        														case 'n':
        														case 'o':
        														case 'p':
        														case 'q':
        														case 'r':
        														case 's':
        														case 't':
        														case 'u':
        														case 'v':
        														case 'w':
        														case 'x':
        														case 'y':
        														case 'z':
        															{
        																alt12=65;
        															}
        														    break;

        														default:
        														    alt12=21;
        														}

        													}
        												    break;

        												default:
        												    alt12=65;
        												}

        											}
        										    break;

        										default:
        										    alt12=65;
        										}

        									}
        								    break;

        								default:
        								    alt12=65;
        								}

        							}
        						    break;

        						default:
        						    alt12=65;
        						}

        					}
        				    break;

        				default:
        				    alt12=65;
        				}

        			}
        		    break;

        		default:
        		    alt12=65;
        		}

        	}
            break;
        case 'c':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'a':
        			{
        				switch ( this->LA(3) )
        				{
        				case 's':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'e':
        							{
        								switch ( this->LA(5) )
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt12=65;
        									}
        								    break;

        								default:
        								    alt12=22;
        								}

        							}
        						    break;

        						default:
        						    alt12=65;
        						}

        					}
        				    break;

        				default:
        				    alt12=65;
        				}

        			}
        		    break;
        		case 'o':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'n':
        					{
        						switch ( this->LA(4) )
        						{
        						case 't':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'i':
        									{
        										switch ( this->LA(6) )
        										{
        										case 'n':
        											{
        												switch ( this->LA(7) )
        												{
        												case 'u':
        													{
        														switch ( this->LA(8) )
        														{
        														case 'e':
        															{
        																switch ( this->LA(9) )
        																{
        																case '0':
        																case '1':
        																case '2':
        																case '3':
        																case '4':
        																case '5':
        																case '6':
        																case '7':
        																case '8':
        																case '9':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt12=65;
        																	}
        																    break;

        																default:
        																    alt12=28;
        																}

        															}
        														    break;

        														default:
        														    alt12=65;
        														}

        													}
        												    break;

        												default:
        												    alt12=65;
        												}

        											}
        										    break;

        										default:
        										    alt12=65;
        										}

        									}
        								    break;

        								default:
        								    alt12=65;
        								}

        							}
        						    break;

        						default:
        						    alt12=65;
        						}

        					}
        				    break;

        				default:
        				    alt12=65;
        				}

        			}
        		    break;

        		default:
        		    alt12=65;
        		}

        	}
            break;
        case 'i':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'f':
        			{
        				switch ( this->LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt12=65;
        					}
        				    break;

        				default:
        				    alt12=23;
        				}

        			}
        		    break;
        		case 's':
        			{
        				switch ( this->LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt12=65;
        					}
        				    break;

        				default:
        				    alt12=63;
        				}

        			}
        		    break;

        		default:
        		    alt12=65;
        		}

        	}
            break;
        case 'w':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'h':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'i':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'l':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'e':
        									{
        										switch ( this->LA(6) )
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt12=65;
        											}
        										    break;

        										default:
        										    alt12=26;
        										}

        									}
        								    break;

        								default:
        								    alt12=65;
        								}

        							}
        						    break;

        						default:
        						    alt12=65;
        						}

        					}
        				    break;

        				default:
        				    alt12=65;
        				}

        			}
        		    break;

        		default:
        		    alt12=65;
        		}

        	}
            break;
        case 'b':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'r':
        			{
        				switch ( this->LA(3) )
        				{
        				case 'e':
        					{
        						switch ( this->LA(4) )
        						{
        						case 'a':
        							{
        								switch ( this->LA(5) )
        								{
        								case 'k':
        									{
        										switch ( this->LA(6) )
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt12=65;
        											}
        										    break;

        										default:
        										    alt12=27;
        										}

        									}
        								    break;

        								default:
        								    alt12=65;
        								}

        							}
        						    break;

        						default:
        						    alt12=65;
        						}

        					}
        				    break;

        				default:
        				    alt12=65;
        				}

        			}
        		    break;

        		default:
        		    alt12=65;
        		}

        	}
            break;
        case '.':
        	{
        		alt12=29;
        	}
            break;
        case '+':
        	{
        		switch ( this->LA(2) )
        		{
        		case '+':
        			{
        				alt12=30;
        			}
        		    break;
        		case '=':
        			{
        				alt12=53;
        			}
        		    break;

        		default:
        		    alt12=36;
        		}

        	}
            break;
        case '-':
        	{
        		switch ( this->LA(2) )
        		{
        		case '-':
        			{
        				alt12=31;
        			}
        		    break;
        		case '=':
        			{
        				alt12=54;
        			}
        		    break;

        		default:
        		    alt12=37;
        		}

        	}
            break;
        case '!':
        	{
        		switch ( this->LA(2) )
        		{
        		case '=':
        			{
        				alt12=45;
        			}
        		    break;

        		default:
        		    alt12=32;
        		}

        	}
            break;
        case '*':
        	{
        		switch ( this->LA(2) )
        		{
        		case '=':
        			{
        				alt12=55;
        			}
        		    break;

        		default:
        		    alt12=33;
        		}

        	}
            break;
        case '/':
        	{
        		switch ( this->LA(2) )
        		{
        		case '=':
        			{
        				alt12=56;
        			}
        		    break;
        		case '*':
        		case '/':
        			{
        				alt12=64;
        			}
        		    break;

        		default:
        		    alt12=34;
        		}

        	}
            break;
        case '%':
        	{
        		switch ( this->LA(2) )
        		{
        		case '=':
        			{
        				alt12=57;
        			}
        		    break;

        		default:
        		    alt12=35;
        		}

        	}
            break;
        case '<':
        	{
        		switch ( this->LA(2) )
        		{
        		case '<':
        			{
        				switch ( this->LA(3) )
        				{
        				case '=':
        					{
        						alt12=58;
        					}
        				    break;

        				default:
        				    alt12=38;
        				}

        			}
        		    break;
        		case '=':
        			{
        				alt12=42;
        			}
        		    break;

        		default:
        		    alt12=40;
        		}

        	}
            break;
        case '>':
        	{
        		switch ( this->LA(2) )
        		{
        		case '>':
        			{
        				switch ( this->LA(3) )
        				{
        				case '=':
        					{
        						alt12=59;
        					}
        				    break;

        				default:
        				    alt12=39;
        				}

        			}
        		    break;
        		case '=':
        			{
        				alt12=43;
        			}
        		    break;

        		default:
        		    alt12=41;
        		}

        	}
            break;
        case '=':
        	{
        		switch ( this->LA(2) )
        		{
        		case '=':
        			{
        				alt12=44;
        			}
        		    break;

        		default:
        		    alt12=52;
        		}

        	}
            break;
        case '&':
        	{
        		switch ( this->LA(2) )
        		{
        		case '&':
        			{
        				alt12=49;
        			}
        		    break;
        		case '=':
        			{
        				alt12=60;
        			}
        		    break;

        		default:
        		    alt12=46;
        		}

        	}
            break;
        case '^':
        	{
        		switch ( this->LA(2) )
        		{
        		case '=':
        			{
        				alt12=61;
        			}
        		    break;

        		default:
        		    alt12=47;
        		}

        	}
            break;
        case '|':
        	{
        		switch ( this->LA(2) )
        		{
        		case '|':
        			{
        				alt12=50;
        			}
        		    break;
        		case '=':
        			{
        				alt12=62;
        			}
        		    break;

        		default:
        		    alt12=48;
        		}

        	}
            break;
        case '?':
        	{
        		alt12=51;
        	}
            break;
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '_':
        case 'g':
        case 'h':
        case 'j':
        case 'k':
        case 'l':
        case 'n':
        case 'o':
        case 'p':
        case 'q':
        case 'u':
        case 'x':
        case 'z':
        	{
        		alt12=65;
        	}
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	{
        		alt12=66;
        	}
            break;
        case '"':
        	{
        		alt12=67;
        	}
            break;
        case '\t':
        case '\n':
        case '\r':
        case ' ':
        	{
        		alt12=68;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< GeoGenScriptLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 12 );
            ex->set_state( 0 );


            goto ruleTokensEx;

        }

        switch (alt12)
        {
    	case 1:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:10: LEFT_BRACKET
    	    {
    	        /* 1:10: LEFT_BRACKET */
    	        mLEFT_BRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:23: RIGHT_BRACKET
    	    {
    	        /* 1:23: RIGHT_BRACKET */
    	        mRIGHT_BRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:37: LEFT_SQUARE_BRACKET
    	    {
    	        /* 1:37: LEFT_SQUARE_BRACKET */
    	        mLEFT_SQUARE_BRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:57: RIGHT_SQUARE_BRACKET
    	    {
    	        /* 1:57: RIGHT_SQUARE_BRACKET */
    	        mRIGHT_SQUARE_BRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:78: LEFT_CURLY_BRACKET
    	    {
    	        /* 1:78: LEFT_CURLY_BRACKET */
    	        mLEFT_CURLY_BRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:97: RIGTH_CURLY_BRACKET
    	    {
    	        /* 1:97: RIGTH_CURLY_BRACKET */
    	        mRIGTH_CURLY_BRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:117: TRUE_LIT
    	    {
    	        /* 1:117: TRUE_LIT */
    	        mTRUE_LIT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:126: FALSE_LIT
    	    {
    	        /* 1:126: FALSE_LIT */
    	        mFALSE_LIT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:136: COMMA
    	    {
    	        /* 1:136: COMMA */
    	        mCOMMA();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:142: SEMICOLON
    	    {
    	        /* 1:142: SEMICOLON */
    	        mSEMICOLON();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:152: COLON
    	    {
    	        /* 1:152: COLON */
    	        mCOLON();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:158: AT
    	    {
    	        /* 1:158: AT */
    	        mAT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:161: METADATA
    	    {
    	        /* 1:161: METADATA */
    	        mMETADATA();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:170: ENUM
    	    {
    	        /* 1:170: ENUM */
    	        mENUM();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:175: FUNCTION
    	    {
    	        /* 1:175: FUNCTION */
    	        mFUNCTION();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:184: VAR
    	    {
    	        /* 1:184: VAR */
    	        mVAR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:188: RETURN
    	    {
    	        /* 1:188: RETURN */
    	        mRETURN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:195: YIELD
    	    {
    	        /* 1:195: YIELD */
    	        mYIELD();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:201: AS
    	    {
    	        /* 1:201: AS */
    	        mAS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:204: SWITCH
    	    {
    	        /* 1:204: SWITCH */
    	        mSWITCH();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 21:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:211: DEFAULT
    	    {
    	        /* 1:211: DEFAULT */
    	        mDEFAULT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 22:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:219: CASE
    	    {
    	        /* 1:219: CASE */
    	        mCASE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 23:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:224: IF
    	    {
    	        /* 1:224: IF */
    	        mIF();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 24:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:227: ELSE
    	    {
    	        /* 1:227: ELSE */
    	        mELSE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 25:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:232: FOR
    	    {
    	        /* 1:232: FOR */
    	        mFOR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 26:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:236: WHILE
    	    {
    	        /* 1:236: WHILE */
    	        mWHILE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 27:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:242: BREAK
    	    {
    	        /* 1:242: BREAK */
    	        mBREAK();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 28:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:248: CONTINUE
    	    {
    	        /* 1:248: CONTINUE */
    	        mCONTINUE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 29:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:257: OPERATOR_DOT
    	    {
    	        /* 1:257: OPERATOR_DOT */
    	        mOPERATOR_DOT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 30:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:270: OPERATOR_INCREMENT
    	    {
    	        /* 1:270: OPERATOR_INCREMENT */
    	        mOPERATOR_INCREMENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 31:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:289: OPERATOR_DECREMENT
    	    {
    	        /* 1:289: OPERATOR_DECREMENT */
    	        mOPERATOR_DECREMENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 32:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:308: OPERATOR_NOT
    	    {
    	        /* 1:308: OPERATOR_NOT */
    	        mOPERATOR_NOT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 33:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:321: OPERATOR_TIMES
    	    {
    	        /* 1:321: OPERATOR_TIMES */
    	        mOPERATOR_TIMES();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 34:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:336: OPERATOR_DIVIDE
    	    {
    	        /* 1:336: OPERATOR_DIVIDE */
    	        mOPERATOR_DIVIDE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 35:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:352: OPERATOR_MODULO
    	    {
    	        /* 1:352: OPERATOR_MODULO */
    	        mOPERATOR_MODULO();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 36:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:368: OPERATOR_PLUS
    	    {
    	        /* 1:368: OPERATOR_PLUS */
    	        mOPERATOR_PLUS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 37:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:382: OPERATOR_MINUS
    	    {
    	        /* 1:382: OPERATOR_MINUS */
    	        mOPERATOR_MINUS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 38:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:397: OPERATOR_LSHIFT
    	    {
    	        /* 1:397: OPERATOR_LSHIFT */
    	        mOPERATOR_LSHIFT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 39:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:413: OPERATOR_RSHIFT
    	    {
    	        /* 1:413: OPERATOR_RSHIFT */
    	        mOPERATOR_RSHIFT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 40:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:429: OPERATOR_LESS_THAN
    	    {
    	        /* 1:429: OPERATOR_LESS_THAN */
    	        mOPERATOR_LESS_THAN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 41:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:448: OPERATOR_GREATER_THAN
    	    {
    	        /* 1:448: OPERATOR_GREATER_THAN */
    	        mOPERATOR_GREATER_THAN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 42:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:470: OPERATOR_LESS_THAN_OR_EQUAL_TO
    	    {
    	        /* 1:470: OPERATOR_LESS_THAN_OR_EQUAL_TO */
    	        mOPERATOR_LESS_THAN_OR_EQUAL_TO();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 43:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:501: OPERATOR_GREATER_THAN_OR_EQUAL_TO
    	    {
    	        /* 1:501: OPERATOR_GREATER_THAN_OR_EQUAL_TO */
    	        mOPERATOR_GREATER_THAN_OR_EQUAL_TO();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 44:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:535: OPERATOR_EQUAL_TO
    	    {
    	        /* 1:535: OPERATOR_EQUAL_TO */
    	        mOPERATOR_EQUAL_TO();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 45:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:553: OPERATOR_NOT_EQUAL_TO
    	    {
    	        /* 1:553: OPERATOR_NOT_EQUAL_TO */
    	        mOPERATOR_NOT_EQUAL_TO();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 46:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:575: OPERATOR_BIT_AND
    	    {
    	        /* 1:575: OPERATOR_BIT_AND */
    	        mOPERATOR_BIT_AND();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 47:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:592: OPERATOR_BIT_XOR
    	    {
    	        /* 1:592: OPERATOR_BIT_XOR */
    	        mOPERATOR_BIT_XOR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 48:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:609: OPERATOR_BIT_OR
    	    {
    	        /* 1:609: OPERATOR_BIT_OR */
    	        mOPERATOR_BIT_OR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 49:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:625: OPERATOR_REL_AND
    	    {
    	        /* 1:625: OPERATOR_REL_AND */
    	        mOPERATOR_REL_AND();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 50:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:642: OPERATOR_REL_OR
    	    {
    	        /* 1:642: OPERATOR_REL_OR */
    	        mOPERATOR_REL_OR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 51:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:658: OPERATOR_EXPR_IF
    	    {
    	        /* 1:658: OPERATOR_EXPR_IF */
    	        mOPERATOR_EXPR_IF();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 52:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:675: OPERATOR_ASSIGN
    	    {
    	        /* 1:675: OPERATOR_ASSIGN */
    	        mOPERATOR_ASSIGN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 53:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:691: OPERATOR_ASSIGN_PLUS
    	    {
    	        /* 1:691: OPERATOR_ASSIGN_PLUS */
    	        mOPERATOR_ASSIGN_PLUS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 54:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:712: OPERATOR_ASSIGN_MINUS
    	    {
    	        /* 1:712: OPERATOR_ASSIGN_MINUS */
    	        mOPERATOR_ASSIGN_MINUS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 55:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:734: OPERATOR_ASSIGN_TIMES
    	    {
    	        /* 1:734: OPERATOR_ASSIGN_TIMES */
    	        mOPERATOR_ASSIGN_TIMES();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 56:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:756: OPERATOR_ASSIGN_DIVIDE
    	    {
    	        /* 1:756: OPERATOR_ASSIGN_DIVIDE */
    	        mOPERATOR_ASSIGN_DIVIDE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 57:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:779: OPERATOR_ASSIGN_MODULO
    	    {
    	        /* 1:779: OPERATOR_ASSIGN_MODULO */
    	        mOPERATOR_ASSIGN_MODULO();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 58:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:802: OPERATOR_ASSIGN_LSHIFT
    	    {
    	        /* 1:802: OPERATOR_ASSIGN_LSHIFT */
    	        mOPERATOR_ASSIGN_LSHIFT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 59:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:825: OPERATOR_ASSIGN_RSHIFT
    	    {
    	        /* 1:825: OPERATOR_ASSIGN_RSHIFT */
    	        mOPERATOR_ASSIGN_RSHIFT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 60:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:848: OPERATOR_ASSIGN_AND
    	    {
    	        /* 1:848: OPERATOR_ASSIGN_AND */
    	        mOPERATOR_ASSIGN_AND();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 61:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:868: OPERATOR_ASSIGN_XOR
    	    {
    	        /* 1:868: OPERATOR_ASSIGN_XOR */
    	        mOPERATOR_ASSIGN_XOR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 62:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:888: OPERATOR_ASSIGN_OR
    	    {
    	        /* 1:888: OPERATOR_ASSIGN_OR */
    	        mOPERATOR_ASSIGN_OR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 63:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:907: OPERATOR_IS
    	    {
    	        /* 1:907: OPERATOR_IS */
    	        mOPERATOR_IS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 64:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:919: COMMENT
    	    {
    	        /* 1:919: COMMENT */
    	        mCOMMENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 65:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:927: IDENTIFIER
    	    {
    	        /* 1:927: IDENTIFIER */
    	        mIDENTIFIER();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 66:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:938: NUMBER
    	    {
    	        /* 1:938: NUMBER */
    	        mNUMBER();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 67:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:945: STRING
    	    {
    	        /* 1:945: STRING */
    	        mSTRING();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 68:
    	    // D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g:1:952: WHITESPACE
    	    {
    	        /* 1:952: WHITESPACE */
    	        mWHITESPACE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */

	}



/* End of code
 * =============================================================================
 */
