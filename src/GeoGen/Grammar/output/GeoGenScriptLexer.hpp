/** \file
 *  This C++ header file was generated by $ANTLR version 3.5-rc-2
 *
 *     -  From the grammar source file : D:\\Users\\Matej\\Desktop\\GeoGen GGS\\src\\GeoGen\\Grammar\\GeoGenScript.g
 *     -                            On : 2013-11-10 01:12:52
 *     -                 for the lexer : GeoGenScriptLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
 * The lexer 
GeoGenScriptLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram. 
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_GeoGenScriptLexer_H
#define _GeoGenScriptLexer_H
/* =============================================================================
 * Standard antlr3 C++ runtime definitions
 */
#include    <antlr3.hpp>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */




#ifdef	WIN32
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
	namespace 
    geogen_generated
 {



	   class GeoGenScriptLexer;
	   class GeoGenScriptParser;
	   typedef antlr3::Traits< GeoGenScriptLexer, GeoGenScriptParser > GeoGenScriptTraits;

	typedef GeoGenScriptTraits GeoGenScriptLexerTraits;
	typedef GeoGenScriptTraits GeoGenScriptParserTraits;

typedef GeoGenScriptLexerTraits GeoGenScriptLexerImplTraits;


class GeoGenScriptLexerTokens
{
public:
	/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
	 * \{
	 *
	 * Antlr will define EOF, but we can't use that as it it is too common in
	 * in C header files and that would be confusing. There is no way to filter this out at the moment
	 * so we just undef it here for now. That isn't the value we get back from C recognizers
	 * anyway. We are looking for ANTLR_TOKEN_EOF.
	 */
	enum Tokens 
	{
		EOF_TOKEN = GeoGenScriptLexerImplTraits::CommonTokenType::TOKEN_EOF
		, AS = 4 
		, AT = 5 
		, BREAK = 6 
		, CASE = 7 
		, COLON = 8 
		, COMMA = 9 
		, COMMENT = 10 
		, CONTINUE = 11 
		, DEFAULT = 12 
		, ELSE = 13 
		, ENUM = 14 
		, ESC_SEQ = 15 
		, FALSE_LIT = 16 
		, FOR = 17 
		, FUNCTION = 18 
		, HEX_DIGIT = 19 
		, IDENTIFIER = 20 
		, IF = 21 
		, INTEGER = 22 
		, LEFT_BRACKET = 23 
		, LEFT_CURLY_BRACKET = 24 
		, LEFT_SQUARE_BRACKET = 25 
		, METADATA = 26 
		, NUMBER = 27 
		, OCTAL_ESC = 28 
		, OPERATOR_ASSIGN = 29 
		, OPERATOR_ASSIGN_AND = 30 
		, OPERATOR_ASSIGN_DIVIDE = 31 
		, OPERATOR_ASSIGN_LSHIFT = 32 
		, OPERATOR_ASSIGN_MINUS = 33 
		, OPERATOR_ASSIGN_MODULO = 34 
		, OPERATOR_ASSIGN_OR = 35 
		, OPERATOR_ASSIGN_PLUS = 36 
		, OPERATOR_ASSIGN_RSHIFT = 37 
		, OPERATOR_ASSIGN_TIMES = 38 
		, OPERATOR_ASSIGN_XOR = 39 
		, OPERATOR_BIT_AND = 40 
		, OPERATOR_BIT_OR = 41 
		, OPERATOR_BIT_XOR = 42 
		, OPERATOR_DECREMENT = 43 
		, OPERATOR_DIVIDE = 44 
		, OPERATOR_DOT = 45 
		, OPERATOR_EQUAL_TO = 46 
		, OPERATOR_EXPR_IF = 47 
		, OPERATOR_GREATER_THAN = 48 
		, OPERATOR_GREATER_THAN_OR_EQUAL_TO = 49 
		, OPERATOR_INCREMENT = 50 
		, OPERATOR_IS = 51 
		, OPERATOR_LESS_THAN = 52 
		, OPERATOR_LESS_THAN_OR_EQUAL_TO = 53 
		, OPERATOR_LSHIFT = 54 
		, OPERATOR_MINUS = 55 
		, OPERATOR_MODULO = 56 
		, OPERATOR_NOT = 57 
		, OPERATOR_NOT_EQUAL_TO = 58 
		, OPERATOR_PLUS = 59 
		, OPERATOR_REL_AND = 60 
		, OPERATOR_REL_OR = 61 
		, OPERATOR_RSHIFT = 62 
		, OPERATOR_TIMES = 63 
		, RETURN = 64 
		, RIGHT_BRACKET = 65 
		, RIGHT_SQUARE_BRACKET = 66 
		, RIGTH_CURLY_BRACKET = 67 
		, SEMICOLON = 68 
		, STRING = 69 
		, SWITCH = 70 
		, TRUE_LIT = 71 
		, UNICODE_ESC = 72 
		, VAR = 73 
		, WHILE = 74 
		, WHITESPACE = 75 
		, YIELD = 76 
	};

};

/** Context tracking structure for 
GeoGenScriptLexer

 */
class GeoGenScriptLexer : public 
GeoGenScriptLexerImplTraits::BaseLexerType
, public GeoGenScriptLexerTokens
{
public:
	typedef GeoGenScriptLexerImplTraits ImplTraits;
	typedef GeoGenScriptLexer ComponentType;
	typedef ComponentType::StreamType StreamType;
	typedef 
GeoGenScriptLexerImplTraits::BaseLexerType
 BaseType;
	typedef ImplTraits::RecognizerSharedStateType<StreamType> RecognizerSharedStateType;
	typedef StreamType InputType;
	static const bool IsFiltered = false;


private:	
public:
    GeoGenScriptLexer(InputType* instream);
    GeoGenScriptLexer(InputType* instream, RecognizerSharedStateType* state);

    void init(InputType* instream  );

    
     void
      mLEFT_BRACKET( );

     void
      mRIGHT_BRACKET( );

     void
      mLEFT_SQUARE_BRACKET( );

     void
      mRIGHT_SQUARE_BRACKET( );

     void
      mLEFT_CURLY_BRACKET( );

     void
      mRIGTH_CURLY_BRACKET( );

     void
      mTRUE_LIT( );

     void
      mFALSE_LIT( );

     void
      mCOMMA( );

     void
      mSEMICOLON( );

     void
      mCOLON( );

     void
      mAT( );

     void
      mMETADATA( );

     void
      mENUM( );

     void
      mFUNCTION( );

     void
      mVAR( );

     void
      mRETURN( );

     void
      mYIELD( );

     void
      mAS( );

     void
      mSWITCH( );

     void
      mDEFAULT( );

     void
      mCASE( );

     void
      mIF( );

     void
      mELSE( );

     void
      mFOR( );

     void
      mWHILE( );

     void
      mBREAK( );

     void
      mCONTINUE( );

     void
      mOPERATOR_DOT( );

     void
      mOPERATOR_INCREMENT( );

     void
      mOPERATOR_DECREMENT( );

     void
      mOPERATOR_NOT( );

     void
      mOPERATOR_TIMES( );

     void
      mOPERATOR_DIVIDE( );

     void
      mOPERATOR_MODULO( );

     void
      mOPERATOR_PLUS( );

     void
      mOPERATOR_MINUS( );

     void
      mOPERATOR_LSHIFT( );

     void
      mOPERATOR_RSHIFT( );

     void
      mOPERATOR_LESS_THAN( );

     void
      mOPERATOR_GREATER_THAN( );

     void
      mOPERATOR_LESS_THAN_OR_EQUAL_TO( );

     void
      mOPERATOR_GREATER_THAN_OR_EQUAL_TO( );

     void
      mOPERATOR_EQUAL_TO( );

     void
      mOPERATOR_NOT_EQUAL_TO( );

     void
      mOPERATOR_BIT_AND( );

     void
      mOPERATOR_BIT_XOR( );

     void
      mOPERATOR_BIT_OR( );

     void
      mOPERATOR_REL_AND( );

     void
      mOPERATOR_REL_OR( );

     void
      mOPERATOR_EXPR_IF( );

     void
      mOPERATOR_ASSIGN( );

     void
      mOPERATOR_ASSIGN_PLUS( );

     void
      mOPERATOR_ASSIGN_MINUS( );

     void
      mOPERATOR_ASSIGN_TIMES( );

     void
      mOPERATOR_ASSIGN_DIVIDE( );

     void
      mOPERATOR_ASSIGN_MODULO( );

     void
      mOPERATOR_ASSIGN_LSHIFT( );

     void
      mOPERATOR_ASSIGN_RSHIFT( );

     void
      mOPERATOR_ASSIGN_AND( );

     void
      mOPERATOR_ASSIGN_XOR( );

     void
      mOPERATOR_ASSIGN_OR( );

     void
      mOPERATOR_IS( );

     void
      mCOMMENT( );

     void
      mIDENTIFIER( );

     void
      mINTEGER( );

     void
      mNUMBER( );

     void
      mSTRING( );

     void
      mHEX_DIGIT( );

     void
      mESC_SEQ( );

     void
      mOCTAL_ESC( );

     void
      mUNICODE_ESC( );

     void
      mWHITESPACE( );

     void
      mTokens( );
    const char *    getGrammarFileName();
    void            reset();
    ~GeoGenScriptLexer();

};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//

/* End of token definitions for GeoGenScriptLexer
 * =============================================================================
 */
/** } */

	}


#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
