namespace GeoGen.Studio.PlugIns
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;

    using GeoGen.Studio;
    using GeoGen.Studio.PlugInLoader;

    /// <summary>
    /// Map generator plug-in interface.
    /// </summary>
    public interface IGenerator : IPlugInInterface, INotifyPropertyChanged
    {
        /// <summary>
        /// Occurs before the generator starts.
        /// </summary>
        event EventHandler<GenerationStartingEventArgs> Starting;

        /// <summary>
        /// Occurs after the generator starts.
        /// </summary>
        event EventHandler<GenerationStartedEventArgs> Started;

        /// <summary>
        /// Occurs when the header is successfully loaded.
        /// </summary>
        event EventHandler HeaderLoaded;

        /// <summary>
        /// Occurs when the generation is aborted by user.
        /// </summary>
        event EventHandler Aborted;

        /// <summary>
        /// Occurs when the generation failed (and it was not aborted).
        /// </summary>
        event EventHandler<GenerationFailedEventArgs> Failed;

        /// <summary>
        /// Occurs when the generation was successfully finished.
        /// </summary>
        event EventHandler<GenerationFinishedEventArgs> Finished;        

        /// <summary>
        /// Gets a value indicating whether the generator is ready to accept requests to run scripts.
        /// </summary>
        /// <value><c>true</c> if the generator is ready; otherwise, <c>false</c>.</value>
        bool IsReady { get; }

        /// <summary>
        /// Gets a value indicating the progress within current map script in percents. The value is 0 if no full script is running. 
        /// </summary>
        /// <value>The progress.</value>
        double? Progress { get; }

        /// <summary>
        /// Gets a collecion of maps generated by last generator run.
        /// </summary>
        ObservableCollection<HeightData> Maps { get; }

        /// <summary>
        /// Gets the collection of args which will be used by current script. Fills in default values when the script is first loaded.
        /// </summary>
        ObservableCollection<ScriptArg> Args { get; }

        /// <summary>
        /// Executed the specified script.
        /// </summary>
        /// <param name="script">The script.</param>
        /// <param name="headerOnly">if set to <c>true</c> [header only].</param>
        /// <param name="parametersOverride">The parameters override.</param>
        void Start(string script, bool headerOnly = false, IEnumerable<uint> parametersOverride = null);

        /// <summary>
        /// Aborts the script being eecuted.
        /// </summary>
        void Abort();
    }
}
